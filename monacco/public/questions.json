{
  "easy": {
      "mcq": [
          {
              "id": 1,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 1",
                  "b": "Wrong Answer 1",
                  "c": "Incorrect Answer 1",
                  "d": "Not Correct Answer 1"
              },
              "answer": "a"
          },
          {
              "id": 2,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 2",
                  "b": "Wrong Answer 2",
                  "c": "Incorrect Answer 2",
                  "d": "Not Correct Answer 2"
              },
              "answer": "a"
          },
          {
              "id": 3,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 3",
                  "b": "Wrong Answer 3",
                  "c": "Incorrect Answer 3",
                  "d": "Not Correct Answer 3"
              },
              "answer": "a"
          },
          {
              "id": 4,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 4",
                  "b": "Wrong Answer 4",
                  "c": "Incorrect Answer 4",
                  "d": "Not Correct Answer 4"
              },
              "answer": "a"
          },
          {
              "id": 5,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 5",
                  "b": "Wrong Answer 5",
                  "c": "Incorrect Answer 5",
                  "d": "Not Correct Answer 5"
              },
              "answer": "a"
          },
          {
              "id": 6,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 6",
                  "b": "Wrong Answer 6",
                  "c": "Incorrect Answer 6",
                  "d": "Not Correct Answer 6"
              },
              "answer": "a"
          },
          {
              "id": 7,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 7",
                  "b": "Wrong Answer 7",
                  "c": "Incorrect Answer 7",
                  "d": "Not Correct Answer 7"
              },
              "answer": "a"
          },
          {
              "id": 8,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 8",
                  "b": "Wrong Answer 8",
                  "c": "Incorrect Answer 8",
                  "d": "Not Correct Answer 8"
              },
              "answer": "a"
          },
          {
              "id": 9,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 9",
                  "b": "Wrong Answer 9",
                  "c": "Incorrect Answer 9",
                  "d": "Not Correct Answer 9"
              },
              "answer": "a"
          },
          {
              "id": 10,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 10",
                  "b": "Wrong Answer 10",
                  "c": "Incorrect Answer 10",
                  "d": "Not Correct Answer 10"
              },
              "answer": "a"
          },
          {
              "id": 11,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 11",
                  "b": "Wrong Answer 11",
                  "c": "Incorrect Answer 11",
                  "d": "Not Correct Answer 11"
              },
              "answer": "a"
          },
          {
              "id": 12,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 12",
                  "b": "Wrong Answer 12",
                  "c": "Incorrect Answer 12",
                  "d": "Not Correct Answer 12"
              },
              "answer": "a"
          },
          {
              "id": 13,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 13",
                  "b": "Wrong Answer 13",
                  "c": "Incorrect Answer 13",
                  "d": "Not Correct Answer 13"
              },
              "answer": "a"
          },
          {
              "id": 14,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 14",
                  "b": "Wrong Answer 14",
                  "c": "Incorrect Answer 14",
                  "d": "Not Correct Answer 14"
              },
              "answer": "a"
          },
          {
              "id": 15,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 15",
                  "b": "Wrong Answer 15",
                  "c": "Incorrect Answer 15",
                  "d": "Not Correct Answer 15"
              },
              "answer": "a"
          },
          {
              "id": 16,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 16",
                  "b": "Wrong Answer 16",
                  "c": "Incorrect Answer 16",
                  "d": "Not Correct Answer 16"
              },
              "answer": "a"
          },
          {
              "id": 17,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 17",
                  "b": "Wrong Answer 17",
                  "c": "Incorrect Answer 17",
                  "d": "Not Correct Answer 17"
              },
              "answer": "a"
          },
          {
              "id": 18,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 18",
                  "b": "Wrong Answer 18",
                  "c": "Incorrect Answer 18",
                  "d": "Not Correct Answer 18"
              },
              "answer": "a"
          },
          {
              "id": 19,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 19",
                  "b": "Wrong Answer 19",
                  "c": "Incorrect Answer 19",
                  "d": "Not Correct Answer 19"
              },
              "answer": "a"
          },
          {
              "id": 20,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 20",
                  "b": "Wrong Answer 20",
                  "c": "Incorrect Answer 20",
                  "d": "Not Correct Answer 20"
              },
              "answer": "a"
          },
          {
              "id": 21,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 21",
                  "b": "Wrong Answer 21",
                  "c": "Incorrect Answer 21",
                  "d": "Not Correct Answer 21"
              },
              "answer": "a"
          },
          {
              "id": 22,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 22",
                  "b": "Wrong Answer 22",
                  "c": "Incorrect Answer 22",
                  "d": "Not Correct Answer 22"
              },
              "answer": "a"
          },
          {
              "id": 23,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 23",
                  "b": "Wrong Answer 23",
                  "c": "Incorrect Answer 23",
                  "d": "Not Correct Answer 23"
              },
              "answer": "a"
          },
          {
              "id": 24,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 24",
                  "b": "Wrong Answer 24",
                  "c": "Incorrect Answer 24",
                  "d": "Not Correct Answer 24"
              },
              "answer": "a"
          },
          {
              "id": 25,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 25",
                  "b": "Wrong Answer 25",
                  "c": "Incorrect Answer 25",
                  "d": "Not Correct Answer 25"
              },
              "answer": "a"
          },
          {
              "id": 26,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 26",
                  "b": "Wrong Answer 26",
                  "c": "Incorrect Answer 26",
                  "d": "Not Correct Answer 26"
              },
              "answer": "a"
          },
          {
              "id": 27,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 27",
                  "b": "Wrong Answer 27",
                  "c": "Incorrect Answer 27",
                  "d": "Not Correct Answer 27"
              },
              "answer": "a"
          },
          {
              "id": 28,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 28",
                  "b": "Wrong Answer 28",
                  "c": "Incorrect Answer 28",
                  "d": "Not Correct Answer 28"
              },
              "answer": "a"
          },
          {
              "id": 29,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 29",
                  "b": "Wrong Answer 29",
                  "c": "Incorrect Answer 29",
                  "d": "Not Correct Answer 29"
              },
              "answer": "a"
          },
          {
              "id": 30,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 30",
                  "b": "Wrong Answer 30",
                  "c": "Incorrect Answer 30",
                  "d": "Not Correct Answer 30"
              },
              "answer": "a"
          },
          {
              "id": 31,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 31",
                  "b": "Wrong Answer 31",
                  "c": "Incorrect Answer 31",
                  "d": "Not Correct Answer 31"
              },
              "answer": "a"
          },
          {
              "id": 32,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 32",
                  "b": "Wrong Answer 32",
                  "c": "Incorrect Answer 32",
                  "d": "Not Correct Answer 32"
              },
              "answer": "a"
          },
          {
              "id": 33,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 33",
                  "b": "Wrong Answer 33",
                  "c": "Incorrect Answer 33",
                  "d": "Not Correct Answer 33"
              },
              "answer": "a"
          },
          {
              "id": 34,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 34",
                  "b": "Wrong Answer 34",
                  "c": "Incorrect Answer 34",
                  "d": "Not Correct Answer 34"
              },
              "answer": "a"
          },
          {
              "id": 35,
              "question": "What is the output of the following Python code related to Python Basics?",
              "options": {
                  "a": "Correct Answer 35",
                  "b": "Wrong Answer 35",
                  "c": "Incorrect Answer 35",
                  "d": "Not Correct Answer 35"
              },
              "answer": "a"
          },
          {
              "id": 36,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 36",
                  "b": "Wrong Answer 36",
                  "c": "Incorrect Answer 36",
                  "d": "Not Correct Answer 36"
              },
              "answer": "a"
          },
          {
              "id": 37,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 37",
                  "b": "Wrong Answer 37",
                  "c": "Incorrect Answer 37",
                  "d": "Not Correct Answer 37"
              },
              "answer": "a"
          },
          {
              "id": 38,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 38",
                  "b": "Wrong Answer 38",
                  "c": "Incorrect Answer 38",
                  "d": "Not Correct Answer 38"
              },
              "answer": "a"
          },
          {
              "id": 39,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 39",
                  "b": "Wrong Answer 39",
                  "c": "Incorrect Answer 39",
                  "d": "Not Correct Answer 39"
              },
              "answer": "a"
          },
          {
              "id": 40,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 40",
                  "b": "Wrong Answer 40",
                  "c": "Incorrect Answer 40",
                  "d": "Not Correct Answer 40"
              },
              "answer": "a"
          },
          {
              "id": 41,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 41",
                  "b": "Wrong Answer 41",
                  "c": "Incorrect Answer 41",
                  "d": "Not Correct Answer 41"
              },
              "answer": "a"
          },
          {
              "id": 42,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 42",
                  "b": "Wrong Answer 42",
                  "c": "Incorrect Answer 42",
                  "d": "Not Correct Answer 42"
              },
              "answer": "a"
          },
          {
              "id": 43,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 43",
                  "b": "Wrong Answer 43",
                  "c": "Incorrect Answer 43",
                  "d": "Not Correct Answer 43"
              },
              "answer": "a"
          },
          {
              "id": 44,
              "question": "What is the output of the following Python code related to Functions?",
              "options": {
                  "a": "Correct Answer 44",
                  "b": "Wrong Answer 44",
                  "c": "Incorrect Answer 44",
                  "d": "Not Correct Answer 44"
              },
              "answer": "a"
          },
          {
              "id": 45,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 45",
                  "b": "Wrong Answer 45",
                  "c": "Incorrect Answer 45",
                  "d": "Not Correct Answer 45"
              },
              "answer": "a"
          },
          {
              "id": 46,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 46",
                  "b": "Wrong Answer 46",
                  "c": "Incorrect Answer 46",
                  "d": "Not Correct Answer 46"
              },
              "answer": "a"
          },
          {
              "id": 47,
              "question": "What is the output of the following Python code related to Control Flow?",
              "options": {
                  "a": "Correct Answer 47",
                  "b": "Wrong Answer 47",
                  "c": "Incorrect Answer 47",
                  "d": "Not Correct Answer 47"
              },
              "answer": "a"
          },
          {
              "id": 48,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 48",
                  "b": "Wrong Answer 48",
                  "c": "Incorrect Answer 48",
                  "d": "Not Correct Answer 48"
              },
              "answer": "a"
          },
          {
              "id": 49,
              "question": "What is the output of the following Python code related to Data Types?",
              "options": {
                  "a": "Correct Answer 49",
                  "b": "Wrong Answer 49",
                  "c": "Incorrect Answer 49",
                  "d": "Not Correct Answer 49"
              },
              "answer": "a"
          },
          {
              "id": 50,
              "question": "What is the output of the following Python code related to Loops?",
              "options": {
                  "a": "Correct Answer 50",
                  "b": "Wrong Answer 50",
                  "c": "Incorrect Answer 50",
                  "d": "Not Correct Answer 50"
              },
              "answer": "a"
          }
      ],
      "coding_2mark": [
          {
              "id": 1,
              "question": "Write a function to reverse a given string.",
              "description": "Given a string, write a function to return the reversed string.",
              "constraints": "- The input will be a non-empty string.",
              "test_cases": [
                  {
                      "input": "Hello World",
                      "output": "dlroW olleH"
                  }
              ],
              "marks": 2
          },
          {
              "id": 2,
              "question": "Write a function to calculate the sum of all elements in a given list.",
              "description": "Given a list of integers, return the sum of all elements.",
              "constraints": "- The list will contain at least one integer.",
              "test_cases": [
                  {
                      "input": [1, 2, 3, 4, 5],
                      "output": 15
                  }
              ],
              "marks": 2
          },
          {
              "id": 3,
              "question": "Write a function to find the maximum number in a given list.",
              "description": "Given a list of integers, return the maximum number in the list.",
              "constraints": "- The list will contain at least one integer.",
              "test_cases": [
                  {
                      "input": [10, 20, 30, 40, 50],
                      "output": 50
                  }
              ],
              "marks": 2
          },
          {
              "id": 4,
              "question": "Write a function to check if a given number is prime.",
              "description": "Given an integer, return True if it is a prime number, otherwise return False.",
              "constraints": "- The input will be a positive integer greater than 1.",
              "test_cases": [
                  {
                      "input": 7,
                      "output": true
                  }
              ],
              "marks": 2
          },
          {
              "id": 5,
              "question": "Write a function to print the FizzBuzz sequence up to a given number.",
              "description": "Print numbers from 1 to n, replacing multiples of 3 with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'.",
              "constraints": "- The input will be a positive integer greater than 0.",
              "test_cases": [
                  {
                      "input": 20,
                      "output": [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz", 16, 17, "Fizz", 19, "Buzz"]
                  }
              ],
              "marks": 5
          },
          
  {
      "id": 6,
      "question": "Write a function to check if a given string is a palindrome.",
      "description": "Given a string, return True if it is a palindrome, otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "radar",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 7,
      "question": "Write a function to find the index of a given element in a list.",
      "description": "Given a list of integers and a target integer, return the index of the target in the list.",
      "constraints": "- The list will contain at least one element.\n- The target will always exist in the list.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 5], 3],
              "output": 2
          }
      ],
      "marks": 2
  },
  {
      "id": 8,
      "question": "Write a function to count the occurrences of each character in a given string.",
      "description": "Given a string, return a dictionary containing the count of each character.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "Hello World",
              "output": {"H": 1, "e": 1, "l": 3, "o": 2, " ": 1, "W": 1, "r": 1, "d": 1}
          }
      ],
      "marks": 5
  },
  {
      "id": 9,
      "question": "Write a function to sort a given list in ascending order.",
      "description": "Given a list of integers, return the sorted list in ascending order.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [5, 2, 8, 1, 9],
              "output": [1, 2, 5, 8, 9]
          }
      ],
      "marks": 2
  },
  {
      "id": 10,
      "question": "Write a function to check if two given strings are anagrams.",
      "description": "Given two strings, return True if they are anagrams, otherwise return False.",
      "constraints": "- The input strings will contain only lowercase letters.",
      "test_cases": [
          {
              "input": ["listen", "silent"],
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 11,
      "question": "Write a function to find the missing number in a given list of consecutive numbers.",
      "description": "Given a list of consecutive numbers with one missing, return the missing number.",
      "constraints": "- The list will contain at least two elements.",
      "test_cases": [
          {
              "input": [1, 2, 3, 5, 6],
              "output": 4
          }
      ],
      "marks": 5
  },
  {
      "id": 12,
      "question": "Write a function to check if a given year is a leap year.",
      "description": "Given a year, return True if it is a leap year, otherwise return False.",
      "constraints": "- The input will be a positive integer representing a year.",
      "test_cases": [
          {
              "input": 2020,
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 13,
      "question": "Write a function to find the GCD of two given numbers.",
      "description": "Given two integers, return their greatest common divisor.",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [12, 18],
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 14,
      "question": "Write a function to convert a given temperature from Celsius to Fahrenheit.",
      "description": "Given a temperature in Celsius, return the equivalent temperature in Fahrenheit.",
      "constraints": "- The input will be an integer or a floating-point number.",
      "test_cases": [
          {
              "input": 30,
              "output": 86
          }
      ],
      "marks": 2
  },
  {
      "id": 15,
      "question": "Write a function to check if a given number is even or odd.",
      "description": "Given an integer, return 'Even' if it is even, otherwise return 'Odd'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": 10,
              "output": "Even"
          }
      ],
      "marks": 2
  },
  {
      "id": 16,
      "question": "Write a function to find the smallest number in a given list.",
      "description": "Given a list of integers, return the smallest number.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [10, 20, 30, 40, 50],
              "output": 10
          }
      ],
      "marks": 2
  },
  {
      "id": 17,
      "question": "Write a function to check if a given string is empty.",
      "description": "Given a string, return True if it is empty, otherwise return False.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 18,
      "question": "Write a function to find the length of a given string.",
      "description": "Given a string, return its length.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "Hello World",
              "output": 11
          }
      ],
      "marks": 2
  },
  {
      "id": 19,
      "question": "Write a function to check if a given number is positive or negative.",
      "description": "Given an integer, return 'Positive' if it is greater than zero, otherwise return 'Negative'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": -10,
              "output": "Negative"
          }
      ],
      "marks": 2
  },
  {
      "id": 20,
      "question": "Write a function to find the product of two given numbers.",
      "description": "Given two integers, return their product.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [2, 3],
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 21,
      "question": "Count Vowels in a String.",
      "description": "Given a string, return the number of vowels in the string.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": 3
          }
      ],
      "marks": 2
  },
  {
      "id": 22,
      "question": "Find First Duplicate in a List.",
      "description": "Given a list of integers, return the first duplicate. If no duplicates are found, return None.",
      "constraints": "- The list will contain at least one element.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5, 2],
              "output": 2
          }
      ],
      "marks": 5
  },
  {
      "id": 23,
      "question": "Validate Email Address.",
      "description": "Given a string, return True if it is a valid email address, otherwise return False.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "test@example.com",
              "output": true
          }
      ],
      "marks": 5
  },
         
  {
      "id": 24,
      "question": "Write a function to reverse a given string.",
      "description": "Given a string, return the reversed version of it.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello",
              "output": "olleh"
          }
      ],
      "marks": 2
  },
  {
      "id": 25,
      "question": "Write a function to calculate the sum of digits of a given number.",
      "description": "Given an integer, return the sum of its digits.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 123,
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 26,
      "question": "Write a function to check if a number is a power of two.",
      "description": "Given an integer, return True if it is a power of two, otherwise return False.",
      "constraints": "- The input will be a positive integer.",
      "test_cases": [
          {
              "input": 8,
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 27,
      "question": "Write a function to check if a list is sorted in ascending order.",
      "description": "Given a list of integers, return True if it is sorted in ascending order, otherwise return False.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5],
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 28,
      "question": "Write a function to convert a given integer to binary format.",
      "description": "Given an integer, return its binary representation as a string.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 10,
              "output": "1010"
          }
      ],
      "marks": 2
  },
  {
      "id": 29,
      "question": "Write a function to find the second largest number in a list.",
      "description": "Given a list of integers, return the second largest number.",
      "constraints": "- The list will contain at least two distinct numbers.",
      "test_cases": [
          {
              "input": [10, 20, 30, 40, 50],
              "output": 40
          }
      ],
      "marks": 5
  },
  {
      "id": 30,
      "question": "Write a function to check if a string contains only digits.",
      "description": "Given a string, return True if it contains only digits, otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "123456",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 31,
      "question": "Write a function to remove duplicate elements from a list.",
      "description": "Given a list of integers, return a new list with duplicates removed.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 2, 3, 4, 4, 5],
              "output": [1, 2, 3, 4, 5]
          }
      ],
      "marks": 2
  },
  {
      "id": 32,
      "question": "Write a function to convert a given string to title case.",
      "description": "Given a string, return it in title case (first letter of each word capitalized).",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "Hello World"
          }
      ],
      "marks": 2
  },
  {
      "id": 33,
      "question": "Write a function to merge two sorted lists into one sorted list.",
      "description": "Given two sorted lists, return a single sorted list containing all elements.",
      "constraints": "- Both lists will contain at least one integer.",
      "test_cases": [
          {
              "input": [[1, 3, 5], [2, 4, 6]],
              "output": [1, 2, 3, 4, 5, 6]
          }
      ],
      "marks": 5
  },
  {
      "id": 34,
      "question": "Write a function to find the mode of a list of numbers.",
      "description": "Given a list of numbers, return the mode (the number that appears most frequently).",
      "constraints": "- The list will contain at least one number.",
      "test_cases": [
          {
              "input": [1, 2, 2, 3, 3, 3, 4],
              "output": 3
          }
      ],
      "marks": 5
  },
  {
      "id": 35,
      "question": "Write a function to generate the Fibonacci sequence up to n terms.",
      "description": "Given an integer n, return a list containing the first n Fibonacci numbers.",
      "constraints": "- The input will be a positive integer.",
      "test_cases": [
          {
              "input": 5,
              "output": [0, 1, 1, 2, 3]
          }
      ],
      "marks": 5
  },
  {
      "id": 36,
      "question": "Write a function to remove all vowels from a string.",
      "description": "Given a string, return a new string with all vowels removed.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "hll wrld"
          }
      ],
      "marks": 2
  },
  {
      "id": 37,
      "question": "Write a function to check if a number is a prime number.",
      "description": "Given an integer, return True if it is prime, otherwise return False.",
      "constraints": "- The input will be a positive integer greater than 1.",
      "test_cases": [
          {
              "input": 13,
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 38,
      "question": "Write a function to count the number of words in a string.",
      "description": "Given a string, return the number of words in the string.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "Hello world, how are you?",
              "output": 5
          }
      ],
      "marks": 2
  },
  {
      "id": 39,
      "question": "Write a function to swap two numbers without using a third variable.",
      "description": "Given two integers, return them swapped without using a temporary variable.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [3, 5],
              "output": [5, 3]
          }
      ],
      "marks": 5
  },
  {
      "id": 40,
      "question": "Write a function to find the HCF (Highest Common Factor) of two numbers.",
      "description": "Given two numbers, return their highest common factor (HCF).",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [24, 36],
              "output": 12
          }
      ],
      "marks": 5
  },
  {
      "id": 41,
      "question": "Write a function to check if a number is an Armstrong number.",
      "description": "Given an integer, return True if it is an Armstrong number, otherwise return False.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 153,
              "output": true
          }
      ],
      "marks": 5
  },
          {
              "id": 42,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          18
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          7,
                          16
                      ],
                      "output": 38
                  }
              ],
              "marks": 2
          },
          
  {
      "id": 42,
      "question": "Write a function to check if a given string is a palindrome.",
      "description": "Given a string, return True if it is a palindrome (reads the same forward and backward), otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "madam",
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 43,
      "question": "Write a function to check if a number is even or odd.",
      "description": "Given an integer, return 'Even' if the number is even, otherwise return 'Odd'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": 7,
              "output": "Odd"
          }
      ],
      "marks": 2
  },
  {
      "id": 44,
      "question": "Write a function to compute the factorial of a number.",
      "description": "Given an integer n, return n! (n factorial).",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 5,
              "output": 120
          }
      ],
      "marks": 5
  },
  {
      "id": 45,
      "question": "Write a function to count the occurrences of a character in a string.",
      "description": "Given a string and a character, return the number of times the character appears in the string.",
      "constraints": "- The input string will be non-empty.",
      "test_cases": [
          {
              "input": ["hello", "l"],
              "output": 2
          }
      ],
      "marks": 2
  },
  {
      "id": 46,
      "question": "Write a function to find the greatest of three numbers.",
      "description": "Given three integers, return the largest among them.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [10, 20, 15],
              "output": 20
          }
      ],
      "marks": 2
  },
  {
      "id": 47,
      "question": "Write a function to find the GCD (Greatest Common Divisor) of two numbers.",
      "description": "Given two integers, return their greatest common divisor (GCD).",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [18, 24],
              "output": 6
          }
      ],
      "marks": 5
  },
  {
      "id": 48,
      "question": "Write a function to reverse the words in a sentence.",
      "description": "Given a string sentence, return a new sentence with words in reverse order.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "world hello"
          }
      ],
      "marks": 5
  },
  {
      "id": 49,
      "question": "Write a function to find the sum of all elements in a list.",
      "description": "Given a list of integers, return the sum of all elements.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5],
              "output": 15
          }
      ],
      "marks": 2
  },
  {
      "id": 50,
      "question": "Write a function to check if two strings are anagrams.",
      "description": "Given two strings, return True if they are anagrams of each other (contain the same characters in different order), otherwise return False.",
      "constraints": "- The input strings will be non-empty.",
      "test_cases": [
          {
              "input": ["listen", "silent"],
              "output": true
          }
      ],
      "marks": 5
  }
      ],
      "coding_5mark": [
          {
              "id": 1,
              "question": "Write a function to find the sum of all even numbers in a list.",
              "description": "The function should iterate through the list and return the sum of all even numbers present.",
              "constraints": "- The list contains only integers.\n- The list may be empty.\n- The function should return 0 if there are no even numbers.",
              "test_cases": [
                {
                  "input": [1, 2, 3, 4, 5],
                  "output": 6
                },
                {
                  "input": [10, 15, 20, 25],
                  "output": 30
                },
                {
                  "input": [1, 3, 5, 7],
                  "output": 0
                }
              ],
              "marks": 5
            },
            {
              "id": 2,
              "question": "Write a function to reverse a given list.",
              "description": "The function should take a list as input and return a new list with elements in reverse order.",
              "constraints": "- The list contains at least one element.\n- The function should not modify the original list.",
              "test_cases": [
                {
                  "input": [1, 2, 3, 4, 5],
                  "output": [5, 4, 3, 2, 1]
                },
                {
                  "input": ["a", "b", "c"],
                  "output": ["c", "b", "a"]
                },
                {
                  "input": [42],
                  "output": [42]
                }
              ],
              "marks": 5
            },
            {
              "id": 3,
              "question": "Write a function to compute the factorial of a number.",
              "description": "The function should return the factorial of a non-negative integer using recursion or iteration.",
              "constraints": "- The input is a non-negative integer.\n- Factorial of 0 is 1.",
              "test_cases": [
                {
                  "input": 5,
                  "output": 120
                },
                {
                  "input": 3,
                  "output": 6
                },
                {
                  "input": 0,
                  "output": 1
                }
              ],
              "marks": 5
            },
            {
              "id": 4,
              "question": "Write a function to check if a given number is a perfect number.",
              "description": "A perfect number is a number that is equal to the sum of its proper divisors.",
              "constraints": "- The input is a positive integer.\n- Return True if the number is perfect, otherwise False.",
              "test_cases": [
                {
                  "input": 6,
                  "output": true
                },
                {
                  "input": 28,
                  "output": true
                },
                {
                  "input": 12,
                  "output": false
                }
              ],
              "marks": 5
            },
            {
              "id": 5,
              "question": "Write a function to merge two sorted lists into one sorted list.",
              "description": "The function should take two sorted lists as input and return a single sorted list containing all elements.",
              "constraints": "- Both lists are sorted in ascending order.\n- The function should return a new sorted list without modifying the input lists.",
              "test_cases": [
                {
                  "input": [[1, 3, 5], [2, 4, 6]],
                  "output": [1, 2, 3, 4, 5, 6]
                },
                {
                  "input": [[10, 20], [15, 25, 30]],
                  "output": [10, 15, 20, 25, 30]
                },
                {
                  "input": [[], [1, 2, 3]],
                  "output": [1, 2, 3]
                }
              ],
              "marks": 5
            },
            {
              "id": 6,
              "question": "Write a function to count the occurrences of an element in a list.",
              "description": "The function should take a list and an element as input and return the count of occurrences of that element in the list.",
              "constraints": "- The list may contain integers or strings.\n- The element to be counted is guaranteed to be of the same type as the list elements.",
              "test_cases": [
                {
                  "input": [[1, 2, 3, 1, 1, 4], 1],
                  "output": 3
                },
                {
                  "input": [["apple", "banana", "apple"], "apple"],
                  "output": 2
                },
                {
                  "input": [[5, 10, 15], 20],
                  "output": 0
                }
              ],
              "marks": 5
            },
            {
              "id": 7,
              "question": "Write a function to find the largest element in a list.",
              "description": "The function should take a list of numbers and return the largest element.",
              "constraints": "- The list contains at least one element.\n- The list may contain negative numbers.",
              "test_cases": [
                {
                  "input": [1, 2, 3, 4, 5],
                  "output": 5
                },
                {
                  "input": [-10, -5, -1, -20],
                  "output": -1
                },
                {
                  "input": [100, 200, 150],
                  "output": 200
                }
              ],
              "marks": 5
            },
            {
              "id": 8,
              "question": "Write a function to check if a string is a palindrome.",
              "description": "The function should return True if the input string reads the same forward and backward.",
              "constraints": "- The input string may contain spaces and punctuation.\n- The function should ignore case sensitivity.",
              "test_cases": [
                {
                  "input": "madam",
                  "output": true
                },
                {
                  "input": "racecar",
                  "output": true
                },
                {
                  "input": "hello",
                  "output": false
                }
              ],
              "marks": 5
            },
            {
              "id": 9,
              "question": "Write a function to compute the sum of digits of a number.",
              "description": "The function should take a non-negative integer and return the sum of its digits.",
              "constraints": "- The input is a non-negative integer.\n- The function should handle single-digit numbers correctly.",
              "test_cases": [
                {
                  "input": 123,
                  "output": 6
                },
                {
                  "input": 4567,
                  "output": 22
                },
                {
                  "input": 0,
                  "output": 0
                }
              ],
              "marks": 5
            },
            {
              "id": 10,
              "question": "Write a function to find the second largest number in a list.",
              "description": "The function should take a list of numbers and return the second largest element.",
              "constraints": "- The list contains at least two unique elements.\n- The list may contain negative numbers.",
              "test_cases": [
                {
                  "input": [10, 20, 30, 40, 50],
                  "output": 40
                },
                {
                  "input": [-10, -5, -2, -20],
                  "output": -5
                },
                {
                  "input": [1, 1, 2, 2, 3],
                  "output": 2
                }
              ],
              "marks": 5
            },
            {
              "id": 11,
              "question": "Write a function to check if two strings are anagrams.",
              "description": "An anagram is a word formed by rearranging the letters of another word.",
              "constraints": "- The input strings contain only lowercase letters.\n- The function should ignore spaces.",
              "test_cases": [
                {
                  "input": ["listen", "silent"],
                  "output": true
                },
                {
                  "input": ["hello", "world"],
                  "output": false
                },
                {
                  "input": ["race", "care"],
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 12,
              "question": "Write a function to count the number of vowels in a string.",
              "description": "The function should return the count of vowels (a, e, i, o, u) in the given string.",
              "constraints": "- The input string may contain uppercase and lowercase letters.\n- The function should be case insensitive.",
              "test_cases": [
                {
                  "input": "hello",
                  "output": 2
                },
                {
                  "input": "python",
                  "output": 1
                },
                {
                  "input": "AEIOUaeiou",
                  "output": 10
                }
              ],
              "marks": 5
            },
            {
              "id": 13,
              "question": "Write a function to generate the first N Fibonacci numbers.",
              "description": "The function should return a list of the first N Fibonacci numbers.",
              "constraints": "- The input N is a positive integer.\n- The first two numbers in the Fibonacci sequence are 0 and 1.",
              "test_cases": [
                {
                  "input": 5,
                  "output": [0, 1, 1, 2, 3]
                },
                {
                  "input": 8,
                  "output": [0, 1, 1, 2, 3, 5, 8, 13]
                },
                {
                  "input": 2,
                  "output": [0, 1]
                }
              ],
              "marks": 5
            },
            {
              "id": 14,
              "question": "Write a function to remove duplicates from a list.",
              "description": "The function should return a new list containing only unique elements.",
              "constraints": "- The list may contain integers or strings.\n- The order of elements should be preserved.",
              "test_cases": [
                {
                  "input": [1, 2, 2, 3, 4, 4, 5],
                  "output": [1, 2, 3, 4, 5]
                },
                {
                  "input": ["apple", "banana", "apple", "cherry"],
                  "output": ["apple", "banana", "cherry"]
                },
                {
                  "input": [10, 10, 10, 10],
                  "output": [10]
                }
              ],
              "marks": 5
            },
            {
              "id": 15,
              "question": "Write a function to check if a number is prime.",
              "description": "The function should return True if the number is prime, otherwise False.",
              "constraints": "- The input is a positive integer greater than 1.\n- A prime number has only two divisors: 1 and itself.",
              "test_cases": [
                {
                  "input": 7,
                  "output": true
                },
                {
                  "input": 10,
                  "output": false
                },
                {
                  "input": 2,
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 16,
              "question": "Write a function to find the greatest common divisor (GCD) of two numbers.",
              "description": "The function should take two integers as input and return their GCD.",
              "constraints": "- The input numbers are positive integers.\n- The function should use an efficient algorithm such as the Euclidean method.",
              "test_cases": [
                {
                  "input": [48, 18],
                  "output": 6
                },
                {
                  "input": [101, 103],
                  "output": 1
                },
                {
                  "input": [56, 98],
                  "output": 14
                }
              ],
              "marks": 5
            },
            {
              "id": 17,
              "question": "Write a function to compute the least common multiple (LCM) of two numbers.",
              "description": "The function should return the LCM of two given integers.",
              "constraints": "- The input numbers are positive integers.\n- The function should use the formula LCM(a, b) = |a*b| / GCD(a, b).",
              "test_cases": [
                {
                  "input": [4, 6],
                  "output": 12
                },
                {
                  "input": [21, 6],
                  "output": 42
                },
                {
                  "input": [7, 5],
                  "output": 35
                }
              ],
              "marks": 5
            },
            {
              "id": 18,
              "question": "Write a function to reverse a string.",
              "description": "The function should take a string as input and return the reversed string.",
              "constraints": "- The input string may contain letters, numbers, and symbols.\n- The function should not use built-in reverse functions.",
              "test_cases": [
                {
                  "input": "hello",
                  "output": "olleh"
                },
                {
                  "input": "Python",
                  "output": "nohtyP"
                },
                {
                  "input": "12345",
                  "output": "54321"
                }
              ],
              "marks": 5
            },
            {
              "id": 19,
              "question": "Write a function to check if a number is an Armstrong number.",
              "description": "An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.",
              "constraints": "- The input is a positive integer.\n- The function should return True if the number is an Armstrong number, otherwise False.",
              "test_cases": [
                {
                  "input": 153,
                  "output": true
                },
                {
                  "input": 9474,
                  "output": true
                },
                {
                  "input": 123,
                  "output": false
                }
              ],
              "marks": 5
            },
            {
              "id": 20,
              "question": "Write a function to generate Pascal's Triangle up to N rows.",
              "description": "The function should return a list of lists representing Pascal's Triangle up to N rows.",
              "constraints": "- The input N is a positive integer.\n- The function should correctly generate Pascal's Triangle.",
              "test_cases": [
                {
                  "input": 5,
                  "output": [
                    [1],
                    [1, 1],
                    [1, 2, 1],
                    [1, 3, 3, 1],
                    [1, 4, 6, 4, 1]
                  ]
                },
                {
                  "input": 3,
                  "output": [
                    [1],
                    [1, 1],
                    [1, 2, 1]
                  ]
                },
                {
                  "input": 1,
                  "output": [
                    [1]
                  ]
                }
              ],
              "marks": 5
            },
            {
              "id": 21,
              "question": "Write a function to find the missing number in a given list of consecutive numbers.",
              "description": "The function should return the missing number from a list of consecutive integers.",
              "constraints": "- The list contains unique numbers.\n- Only one number is missing from the sequence.",
              "test_cases": [
                {
                  "input": [1, 2, 3, 5],
                  "output": 4
                },
                {
                  "input": [10, 11, 12, 14],
                  "output": 13
                },
                {
                  "input": [100, 101, 103],
                  "output": 102
                }
              ],
              "marks": 5
            },
            {
              "id": 22,
              "question": "Write a function to determine if a given string contains all unique characters.",
              "description": "The function should return True if all characters in the string are unique, otherwise False.",
              "constraints": "- The input string may contain lowercase and uppercase letters.\n- The function should ignore spaces.",
              "test_cases": [
                {
                  "input": "abcdef",
                  "output": true
                },
                {
                  "input": "hello",
                  "output": false
                },
                {
                  "input": "Python",
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 23,
              "question": "Write a function to compute the factorial of a number using recursion.",
              "description": "The function should return the factorial of a given number.",
              "constraints": "- The input is a non-negative integer.\n- The function should use recursion.",
              "test_cases": [
                {
                  "input": 5,
                  "output": 120
                },
                {
                  "input": 0,
                  "output": 1
                },
                {
                  "input": 7,
                  "output": 5040
                }
              ],
              "marks": 5
            },
            {
              "id": 24,
              "question": "Write a function to convert a decimal number to binary.",
              "description": "The function should return the binary representation of a given number as a string.",
              "constraints": "- The input is a non-negative integer.\n- The function should not use built-in bin() function.",
              "test_cases": [
                {
                  "input": 5,
                  "output": "101"
                },
                {
                  "input": 10,
                  "output": "1010"
                },
                {
                  "input": 15,
                  "output": "1111"
                }
              ],
              "marks": 5
            },
            {
              "id": 25,
              "question": "Write a function to check if two given lists are equal.",
              "description": "The function should return True if both lists contain the same elements in the same order.",
              "constraints": "- The lists may contain integers or strings.\n- The function should return False if lists are of different lengths.",
              "test_cases": [
                {
                  "input": [[1, 2, 3], [1, 2, 3]],
                  "output": true
                },
                {
                  "input": [[1, 2, 3], [3, 2, 1]],
                  "output": false
                },
                {
                  "input": [["a", "b", "c"], ["a", "b", "c"]],
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 26,
              "question": "Write a function to find the first non-repeating character in a string.",
              "description": "The function should return the first character that does not repeat in the given string.",
              "constraints": "- The input string contains only lowercase letters.\n- If no non-repeating character is found, return an empty string.",
              "test_cases": [
                {
                  "input": "aabbcdd",
                  "output": "c"
                },
                {
                  "input": "abcabc",
                  "output": ""
                },
                {
                  "input": "swiss",
                  "output": "w"
                }
              ],
              "marks": 5
            },
            {
              "id": 27,
              "question": "Write a function to determine whether a string is a valid palindrome, ignoring spaces and punctuation.",
              "description": "The function should return True if the given string is a palindrome after removing non-alphanumeric characters.",
              "constraints": "- The input string may contain uppercase and lowercase letters.\n- Ignore spaces and punctuation.",
              "test_cases": [
                {
                  "input": "A man, a plan, a canal, Panama",
                  "output": true
                },
                {
                  "input": "race a car",
                  "output": false
                },
                {
                  "input": "No 'x' in Nixon",
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 28,
              "question": "Write a function to find the longest common prefix among an array of strings.",
              "description": "The function should return the longest prefix that all strings share.",
              "constraints": "- The input is a list of non-empty strings.\n- Return an empty string if there is no common prefix.",
              "test_cases": [
                {
                  "input": ["flower", "flow", "flight"],
                  "output": "fl"
                },
                {
                  "input": ["dog", "racecar", "car"],
                  "output": ""
                },
                {
                  "input": ["interview", "interval", "internal"],
                  "output": "inte"
                }
              ],
              "marks": 5
            },
            {
              "id": 29,
              "question": "Write a function to count the number of words in a given sentence.",
              "description": "The function should return the total number of words present in a sentence.",
              "constraints": "- The sentence may contain punctuation marks.\n- Words are separated by spaces.",
              "test_cases": [
                {
                  "input": "Hello world!",
                  "output": 2
                },
                {
                  "input": "This is an example sentence.",
                  "output": 5
                },
                {
                  "input": "   Leading and trailing spaces   ",
                  "output": 4
                }
              ],
              "marks": 5
            },
            {
              "id": 30,
              "question": "Write a function to find the second largest number in a list.",
              "description": "The function should return the second largest number in a list of integers.",
              "constraints": "- The list contains at least two distinct numbers.\n- The function should handle negative numbers.",
              "test_cases": [
                {
                  "input": [10, 20, 4, 45, 99],
                  "output": 45
                },
                {
                  "input": [5, 5, 4, 3, 2],
                  "output": 4
                },
                {
                  "input": [-5, -1, -10, -2],
                  "output": -2
                }
              ],
              "marks": 5
            },
            {
              "id": 31,
              "question": "Write a function to compute the sum of digits of a number.",
              "description": "The function should return the sum of the digits of a given number.",
              "constraints": "- The input is a positive integer.\n- The function should work efficiently for large numbers.",
              "test_cases": [
                {
                  "input": 123,
                  "output": 6
                },
                {
                  "input": 9876,
                  "output": 30
                },
                {
                  "input": 5,
                  "output": 5
                }
              ],
              "marks": 5
            },
            {
              "id": 32,
              "question": "Write a function to remove duplicates from a list while maintaining the order.",
              "description": "The function should return a new list without duplicate elements while keeping the original order.",
              "constraints": "- The input list contains integers.\n- The function should not use built-in set() operations.",
              "test_cases": [
                {
                  "input": [1, 2, 2, 3, 4, 4, 5],
                  "output": [1, 2, 3, 4, 5]
                },
                {
                  "input": [10, 10, 20, 30, 30, 30],
                  "output": [10, 20, 30]
                },
                {
                  "input": [5, 6, 7, 8, 9, 9, 9],
                  "output": [5, 6, 7, 8, 9]
                }
              ],
              "marks": 5
            },
            {
              "id": 33,
              "question": "Write a function to check whether a given number is prime.",
              "description": "The function should return True if the number is prime, otherwise False.",
              "constraints": "- The input is a positive integer.\n- The function should be optimized for large numbers.",
              "test_cases": [
                {
                  "input": 2,
                  "output": true
                },
                {
                  "input": 15,
                  "output": false
                },
                {
                  "input": 97,
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 34,
              "question": "Write a function to check if two strings are anagrams.",
              "description": "An anagram is a word formed by rearranging the letters of another word.",
              "constraints": "- The function should ignore case and spaces.\n- Return True if both words are anagrams, otherwise False.",
              "test_cases": [
                {
                  "input": ["listen", "silent"],
                  "output": true
                },
                {
                  "input": ["hello", "world"],
                  "output": false
                },
                {
                  "input": ["Astronomer", "Moon starer"],
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 35,
              "question": "Write a function to return the Fibonacci sequence up to N terms.",
              "description": "The function should return a list containing the Fibonacci sequence up to N terms.",
              "constraints": "- The input N is a positive integer.\n- The function should use iteration, not recursion.",
              "test_cases": [
                {
                  "input": 5,
                  "output": [0, 1, 1, 2, 3]
                },
                {
                  "input": 7,
                  "output": [0, 1, 1, 2, 3, 5, 8]
                },
                {
                  "input": 1,
                  "output": [0]
                }
              ],
              "marks": 5
            },
            {
              "id": 36,
              "question": "Write a function to rotate a list to the right by K positions.",
              "description": "The function should rotate the given list K times to the right.",
              "constraints": "- The input list may contain integers.\n- The value of K can be greater than the length of the list.",
              "test_cases": [
                {
                  "input": [[1, 2, 3, 4, 5], 2],
                  "output": [4, 5, 1, 2, 3]
                },
                {
                  "input": [[10, 20, 30, 40, 50], 3],
                  "output": [30, 40, 50, 10, 20]
                },
                {
                  "input": [[7, 8, 9], 5],
                  "output": [8, 9, 7]
                }
              ],
              "marks": 5
            },
            {
              "id": 37,
              "question": "Write a function to compute the factorial of a number using iteration.",
              "description": "The function should return the factorial of the given integer.",
              "constraints": "- The input is a non-negative integer.\n- The function should not use recursion.",
              "test_cases": [
                {
                  "input": 5,
                  "output": 120
                },
                {
                  "input": 0,
                  "output": 1
                },
                {
                  "input": 7,
                  "output": 5040
                }
              ],
              "marks": 5
            },
            {
              "id": 38,
              "question": "Write a function to find the GCD (Greatest Common Divisor) of two numbers.",
              "description": "The function should return the greatest common divisor of two numbers.",
              "constraints": "- The input numbers are positive integers.\n- Use the Euclidean algorithm for efficiency.",
              "test_cases": [
                {
                  "input": [24, 36],
                  "output": 12
                },
                {
                  "input": [17, 23],
                  "output": 1
                },
                {
                  "input": [48, 18],
                  "output": 6
                }
              ],
              "marks": 5
            },
            {
              "id": 39,
              "question": "Write a function to check if a given number is an Armstrong number.",
              "description": "An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.",
              "constraints": "- The input is a positive integer.\n- The function should work efficiently for three-digit numbers.",
              "test_cases": [
                {
                  "input": 153,
                  "output": true
                },
                {
                  "input": 9474,
                  "output": true
                },
                {
                  "input": 123,
                  "output": false
                }
              ],
              "marks": 5
            },
            {
              "id": 40,
              "question": "Write a function to find the longest palindrome in a given string.",
              "description": "The function should return the longest substring that is a palindrome.",
              "constraints": "- The input string contains only lowercase letters.\n- If multiple palindromes of the same length exist, return the first one.",
              "test_cases": [
                {
                  "input": "babad",
                  "output": "bab"
                },
                {
                  "input": "cbbd",
                  "output": "bb"
                },
                {
                  "input": "a",
                  "output": "a"
                }
              ],
              "marks": 5
            },
            {
              "id": 41,
              "question": "Write a function to determine if a given year is a leap year.",
              "description": "The function should return True if the given year is a leap year, otherwise False.",
              "constraints": "- A leap year is divisible by 4 but not by 100 unless it is also divisible by 400.",
              "test_cases": [
                {
                  "input": 2000,
                  "output": true
                },
                {
                  "input": 1900,
                  "output": false
                },
                {
                  "input": 2024,
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 42,
              "question": "Write a function to generate Pascal’s Triangle up to N rows.",
              "description": "The function should return a list of lists representing Pascal’s Triangle up to the given number of rows.",
              "constraints": "- The input N is a positive integer.\n- The function should use iteration, not recursion.",
              "test_cases": [
                {
                  "input": 5,
                  "output": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
                },
                {
                  "input": 3,
                  "output": [[1], [1, 1], [1, 2, 1]]
                },
                {
                  "input": 1,
                  "output": [[1]]
                }
              ],
              "marks": 5
            },
            {
              "id": 43,
              "question": "Write a function to find the sum of all prime numbers up to N.",
              "description": "The function should return the sum of all prime numbers up to the given number.",
              "constraints": "- The input N is a positive integer.\n- The function should use an optimized approach such as the Sieve of Eratosthenes.",
              "test_cases": [
                {
                  "input": 10,
                  "output": 17
                },
                {
                  "input": 20,
                  "output": 77
                },
                {
                  "input": 5,
                  "output": 10
                }
              ],
              "marks": 5
            },
            {
              "id": 44,
              "question": "Write a function to check if a given string is a valid IPv4 address.",
              "description": "The function should return True if the given string is a valid IPv4 address, otherwise False.",
              "constraints": "- An IPv4 address consists of four numbers (0-255) separated by dots.\n- Leading zeros are not allowed.",
              "test_cases": [
                {
                  "input": "192.168.1.1",
                  "output": true
                },
                {
                  "input": "256.100.50.25",
                  "output": false
                },
                {
                  "input": "192.168.01.1",
                  "output": false
                }
              ],
              "marks": 5
            },
            {
              "id": 45,
              "question": "Write a function to count the occurrences of each character in a string.",
              "description": "The function should return a dictionary with characters as keys and their occurrences as values.",
              "constraints": "- The input string may contain spaces and punctuation.\n- The function should be case-sensitive.",
              "test_cases": [
                {
                  "input": "hello",
                  "output": {"h": 1, "e": 1, "l": 2, "o": 1}
                },
                {
                  "input": "apple",
                  "output": {"a": 1, "p": 2, "l": 1, "e": 1}
                },
                {
                  "input": "Test Case",
                  "output": {"T": 1, "e": 2, "s": 2, "t": 1, " ": 1, "C": 1, "a": 1}
                }
              ],
              "marks": 5
            },
            {
              "id": 46,
              "question": "Write a function to check if a given string is a pangram.",
              "description": "A pangram is a sentence that contains every letter of the alphabet at least once.",
              "constraints": "- The input string may contain spaces and punctuation.\n- The function should be case-insensitive.",
              "test_cases": [
                {
                  "input": "The quick brown fox jumps over the lazy dog",
                  "output": true
                },
                {
                  "input": "Hello world",
                  "output": false
                },
                {
                  "input": "Pack my box with five dozen liquor jugs",
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 47,
              "question": "Write a function to convert a Roman numeral to an integer.",
              "description": "The function should return the integer equivalent of a given Roman numeral string.",
              "constraints": "- The input string represents a valid Roman numeral.\n- The function should correctly handle subtraction cases like IV, IX, etc.",
              "test_cases": [
                {
                  "input": "XII",
                  "output": 12
                },
                {
                  "input": "IX",
                  "output": 9
                },
                {
                  "input": "MCMXCIV",
                  "output": 1994
                }
              ],
              "marks": 5
            },
            {
              "id": 48,
              "question": "Write a function to check if two strings are anagrams.",
              "description": "Two strings are anagrams if they contain the same characters in the same frequency but in different orders.",
              "constraints": "- The input strings may contain only lowercase letters.\n- Ignore spaces and punctuation.",
              "test_cases": [
                {
                  "input": ["listen", "silent"],
                  "output": true
                },
                {
                  "input": ["hello", "world"],
                  "output": false
                },
                {
                  "input": ["anagram", "nagaram"],
                  "output": true
                }
              ],
              "marks": 5
            },
            {
              "id": 49,
              "question": "Write a function to find the longest common prefix among a list of strings.",
              "description": "The function should return the longest common prefix shared by all strings in the given list.",
              "constraints": "- The input list contains at least one string.\n- If no common prefix exists, return an empty string.",
              "test_cases": [
                {
                  "input": ["flower", "flow", "flight"],
                  "output": "fl"
                },
                {
                  "input": ["dog", "racecar", "car"],
                  "output": ""
                },
                {
                  "input": ["interstellar", "internet", "internal"],
                  "output": "inte"
                }
              ],
              "marks": 5
            },
            {
              "id": 50,
              "question": "Write a function to find the first non-repeating character in a string.",
              "description": "The function should return the first character that appears only once in the given string.",
              "constraints": "- The input string may contain spaces and punctuation.\n- If no non-repeating character exists, return an empty string.",
              "test_cases": [
                {
                  "input": "swiss",
                  "output": "w"
                },
                {
                  "input": "racecar",
                  "output": "e"
                },
                {
                  "input": "aabbcc",
                  "output": ""
                }
              ],
              "marks": 5
            }           
      ]
  },
  "medium": {
      "mcq": [
          {
              "id": 1,
              "question": "What is the output of the following Python code related to Modules & Packages?",
              "options": {
                  "a": "Correct Answer 1",
                  "b": "Wrong Answer 1",
                  "c": "Incorrect Answer 1",
                  "d": "Not Correct Answer 1"
              },
              "answer": "a"
          },
          {
              "id": 2,
              "question": "What is the output of the following Python code related to Recursion?",
              "options": {
                  "a": "Correct Answer 2",
                  "b": "Wrong Answer 2",
                  "c": "Incorrect Answer 2",
                  "d": "Not Correct Answer 2"
              },
              "answer": "a"
          },
          {
              "id": 3,
              "question": "What is the output of the following Python code related to Recursion?",
              "options": {
                  "a": "Correct Answer 3",
                  "b": "Wrong Answer 3",
                  "c": "Incorrect Answer 3",
                  "d": "Not Correct Answer 3"
              },
              "answer": "a"
          },
          {
              "id": 4,
              "question": "What is the output of the following Python code related to Modules & Packages?",
              "options": {
                  "a": "Correct Answer 4",
                  "b": "Wrong Answer 4",
                  "c": "Incorrect Answer 4",
                  "d": "Not Correct Answer 4"
              },
              "answer": "a"
          },
          {
              "id": 5,
              "question": "What is the output of the following Python code related to Exception Handling?",
              "options": {
                  "a": "Correct Answer 5",
                  "b": "Wrong Answer 5",
                  "c": "Incorrect Answer 5",
                  "d": "Not Correct Answer 5"
              },
              "answer": "a"
          },
          {
              "id": 6,
              "question": "What is the output of the following Python code related to OOP in Python?",
              "options": {
                  "a": "Correct Answer 6",
                  "b": "Wrong Answer 6",
                  "c": "Incorrect Answer 6",
                  "d": "Not Correct Answer 6"
              },
              "answer": "a"
          },
          {
              "id": 7,
              "question": "What is the output of the following Python code related to OOP in Python?",
              "options": {
                  "a": "Correct Answer 7",
                  "b": "Wrong Answer 7",
                  "c": "Incorrect Answer 7",
                  "d": "Not Correct Answer 7"
              },
              "answer": "a"
          },
          {
              "id": 8,
              "question": "What is the output of the following Python code related to Exception Handling?",
              "options": {
                  "a": "Correct Answer 8",
                  "b": "Wrong Answer 8",
                  "c": "Incorrect Answer 8",
                  "d": "Not Correct Answer 8"
              },
              "answer": "a"
          },
          {
              "id": 9,
              "question": "What is the output of the following Python code related to Exception Handling?",
              "options": {
                  "a": "Correct Answer 9",
                  "b": "Wrong Answer 9",
                  "c": "Incorrect Answer 9",
                  "d": "Not Correct Answer 9"
              },
              "answer": "a"
          },
          {
              "id": 10,
              "question": "What is the output of the following Python code related to OOP in Python?",
              "options": {
                  "a": "Correct Answer 10",
                  "b": "Wrong Answer 10",
                  "c": "Incorrect Answer 10",
                  "d": "Not Correct Answer 10"
              },
              "answer": "a"
          },
          {
              "id": 11,
              "question": "What will be the output of print(2 ** 3 ** 2)?",
              "options": {
                  "a": "64",
                  "b": "512",
                  "c": "256",
                  "d": "Error"
              },
              "answer": "b"
          },
          {
              "id": 12,
              "question": "Which of the following is a valid way to open a file in Python?",
              "options": {
                  "a": "file.open('test.txt', 'r')",
                  "b": "open('test.txt', 'r')",
                  "c": "openfile('test.txt', 'r')",
                  "d": "open_text('test.txt', 'r')"
              },
              "answer": "b"
          },
          {
              "id": 13,
              "question": "What is the output of print(type(lambda x: x))?",
              "options": {
                  "a": "<class 'function'>",
                  "b": "<class 'lambda'>",
                  "c": "<class 'method'>",
                  "d": "Error"
              },
              "answer": "a"
          },
          {
              "id": 14,
              "question": "How do you get the number of items in a dictionary?",
              "options": {
                  "a": "count(dict)",
                  "b": "len(dict)",
                  "c": "dict.length()",
                  "d": "size(dict)"
              },
              "answer": "b"
          },
          {
              "id": 15,
              "question": "What is the difference between append() and extend() in lists?",
              "options": {
                  "a": "append() adds an element, extend() adds multiple elements",
                  "b": "append() removes an element, extend() adds elements",
                  "c": "append() only works with numbers, extend() works with all data types",
                  "d": "There is no difference"
              },
              "answer": "a"
          },
          {
              "id": 16,
              "question": "Which module is used for regular expressions in Python?",
              "options": {
                  "a": "regex",
                  "b": "re",
                  "c": "regexp",
                  "d": "pyregex"
              },
              "answer": "b"
          },
          {
              "id": 17,
              "question": "Which statement is used to define an anonymous function?",
              "options": {
                  "a": "def",
                  "b": "lambda",
                  "c": "func",
                  "d": "anon"
              },
              "answer": "b"
          },
          {
              "id": 18,
              "question": "How do you remove whitespace from both ends of a string?",
              "options": {
                  "a": "trim()",
                  "b": "strip()",
                  "c": "cut()",
                  "d": "remove()"
              },
              "answer": "b"
          },
          {
              "id": 19,
              "question": "Which of the following is NOT a valid variable name?",
              "options": {
                  "a": "_var1",
                  "b": "2var",
                  "c": "var_2",
                  "d": "varTwo"
              },
              "answer": "b"
          },
          {
              "id": 20,
              "question": "What will be the output of print(10 // 3)?",
              "options": {
                  "a": "3.33",
                  "b": "3",
                  "c": "4",
                  "d": "Error"
              },
              "answer": "b"
          },
          {
              "id": 21,
              "question": "What is the purpose of the pass statement in Python?",
              "options": {
                  "a": "To define an empty function or loop",
                  "b": "To pass an argument to a function",
                  "c": "To break out of a loop",
                  "d": "To continue the execution"
              },
              "answer": "a"
          },
          {
              "id": 22,
              "question": "Which of these will create a tuple?",
              "options": {
                  "a": "[]",
                  "b": "{}",
                  "c": "()",
                  "d": "tuple[]"
              },
              "answer": "c"
          },
          {
              "id": 23,
              "question": "Which function is used to get the current working directory?",
              "options": {
                  "a": "os.getcwd()",
                  "b": "os.curdir()",
                  "c": "os.getwd()",
                  "d": "os.pwd()"
              },
              "answer": "a"
          },
          {
              "id": 24,
              "question": "What is the output of print(bool([]))?",
              "options": {
                  "a": "True",
                  "b": "False",
                  "c": "Error",
                  "d": "None"
              },
              "answer": "b"
          },
          {
              "id": 25,
              "question": "How do you generate a random number in Python?",
              "options": {
                  "a": "random(10)",
                  "b": "randint(1, 10)",
                  "c": "random.randint(1, 10)",
                  "d": "random.random(10)"
              },
              "answer": "c"
          },
          {
              "id": 26,
              "question": "What does the pop() method do in lists?",
              "options": {
                  "a": "Removes and returns the last element",
                  "b": "Removes all elements",
                  "c": "Removes a specific element by value",
                  "d": "Deletes the list"
              },
              "answer": "a"
          },
          {
              "id": 27,
              "question": "What will be the output of print(5 & 3)?",
              "options": {
                  "a": "7",
                  "b": "1",
                  "c": "2",
                  "d": "0"
              },
              "answer": "b"
          },
          {
              "id": 28,
              "question": "Which method is used to replace a substring in a string?",
              "options": {
                  "a": "replace()",
                  "b": "sub()",
                  "c": "switch()",
                  "d": "modify()"
              },
              "answer": "a"
          },
          {
              "id": 29,
              "question": "Which keyword is used to define a class in Python?",
              "options": {
                  "a": "define",
                  "b": "class",
                  "c": "structure",
                  "d": "object"
              },
              "answer": "b"
          },
          {
              "id": 30,
              "question": "What will be the output of print(bool(None))?",
              "options": {
                  "a": "True",
                  "b": "False",
                  "c": "Error",
                  "d": "None"
              },
              "answer": "b"
          },
          {
              "id": 31,
              "question": "Which method is used to convert a string into lowercase?",
              "options": {
                  "a": "toLower()",
                  "b": "lower()",
                  "c": "convert_lower()",
                  "d": "casefold()"
              },
              "answer": "b"
          },
          {
              "id": 32,
              "question": "What will be the output of print(3 * 'abc')?",
              "options": {
                  "a": "'abcabcabc'",
                  "b": "'abcabc'",
                  "c": "'abc * 3'",
                  "d": "Error"
              },
              "answer": "a"
          },
          {
              "id": 33,
              "question": "Which of the following is used to get a list of all attributes and methods of an object?",
              "options": {
                  "a": "getattr()",
                  "b": "dir()",
                  "c": "attributes()",
                  "d": "methods()"
              },
              "answer": "b"
          },
          {
              "id": 34,
              "question": "What is the correct way to check if a key exists in a dictionary?",
              "options": {
                  "a": "if key in dict:",
                  "b": "if dict.has_key(key):",
                  "c": "if key.exists(dict):",
                  "d": "if key in dict.keys():"
              },
              "answer": "a"
          },
          {
              "id": 35,
              "question": "What will be the output of print(type([]) is list)?",
              "options": {
                  "a": "True",
                  "b": "False",
                  "c": "None",
                  "d": "Error"
              },
              "answer": "a"
          },
          {
              "id": 36,
              "question": "Which operator is used for exponentiation?",
              "options": {
                  "a": "^",
                  "b": "**",
                  "c": "^^",
                  "d": "//"
              },
              "answer": "b"
          },
          {
              "id": 37,
              "question": "Which of the following is NOT a Python data structure?",
              "options": {
                  "a": "List",
                  "b": "Tuple",
                  "c": "Dictionary",
                  "d": "SetList"
              },
              "answer": "d"
          },
          {
              "id": 38,
              "question": "How do you create an empty set in Python?",
              "options": {
                  "a": "{}",
                  "b": "set()",
                  "c": "[]",
                  "d": "set([])"
              },
              "answer": "b"
          },
          {
              "id": 39,
              "question": "What does the zip() function do?",
              "options": {
                  "a": "Compress files",
                  "b": "Combine multiple iterables element-wise",
                  "c": "Sort lists",
                  "d": "Merge dictionaries"
              },
              "answer": "b"
          },
          {
              "id": 40,
              "question": "Which of the following removes an element by index from a list?",
              "options": {
                  "a": "del list[index]",
                  "b": "list.remove(index)",
                  "c": "list.pop(index)",
                  "d": "Both a and c"
              },
              "answer": "d"
          },
          {
              "id": 41,
              "question": "Which module is used for working with dates in Python?",
              "options": {
                  "a": "datetime",
                  "b": "time",
                  "c": "dateutil",
                  "d": "calendar"
              },
              "answer": "a"
          },
          {
              "id": 42,
              "question": "What will be the output of bool('False')?",
              "options": {
                  "a": "False",
                  "b": "True",
                  "c": "None",
                  "d": "Error"
              },
              "answer": "b"
          },
          {
              "id": 43,
              "question": "Which keyword is used for exception handling?",
              "options": {
                  "a": "catch",
                  "b": "try",
                  "c": "except",
                  "d": "Both b and c"
              },
              "answer": "d"
          },
          {
              "id": 44,
              "question": "What is the output of print(list(range(5)))?",
              "options": {
                  "a": "[1, 2, 3, 4, 5]",
                  "b": "[0, 1, 2, 3, 4]",
                  "c": "[0, 1, 2, 3, 4, 5]",
                  "d": "Error"
              },
              "answer": "b"
          },
          {
              "id": 45,
              "question": "How do you remove duplicate elements from a list?",
              "options": {
                  "a": "list.unique()",
                  "b": "set(list)",
                  "c": "list.remove_duplicates()",
                  "d": "filter(list)"
              },
              "answer": "b"
          },
          {
              "id": 46,
              "question": "Which method is used to join elements of a list into a string?",
              "options": {
                  "a": "concat()",
                  "b": "join()",
                  "c": "merge()",
                  "d": "combine()"
              },
              "answer": "b"
          },
          {
              "id": 47,
              "question": "What is the output of print(type({}))?",
              "options": {
                  "a": "<class 'dict'>",
                  "b": "<class 'set'>",
                  "c": "<class 'tuple'>",
                  "d": "<class 'list'>"
              },
              "answer": "a"
          },
          {
              "id": 48,
              "question": "Which of the following is NOT a valid way to create a list?",
              "options": {
                  "a": "[]",
                  "b": "list()",
                  "c": "list([])",
                  "d": "list{}"
              },
              "answer": "d"
          },
          {
              "id": 49,
              "question": "What will be the output of print(bool(0))?",
              "options": {
                  "a": "True",
                  "b": "False",
                  "c": "Error",
                  "d": "None"
              },
              "answer": "b"
          },
          {
              "id": 50,
              "question": "How do you check if a string starts with a specific substring?",
              "options": {
                  "a": "startswith()",
                  "b": "endswith()",
                  "c": "find()",
                  "d": "contains()"
              },
              "answer": "a"
          }
      ],
      "coding_2mark": [
         
  {
      "id": 1,
      "question": "Find the ASCII Value of a Character",
      "description": "Write a function that returns the ASCII value of a given character.",
      "constraints": "- The input is a single character.\n- The function should return an integer representing the ASCII value.",
      "test_cases": [
          {
              "input": ["A"],
              "output": 65
          },
          {
              "input": ["z"],
              "output": 122
          }
      ],
      "marks": 1
  },
  {
      "id": 2,
      "question": "Check if a Number is Prime",
      "description": "Write a function that checks whether a given number is prime.",
      "constraints": "- The input is a positive integer.\n- The function should return True if the number is prime, otherwise False.",
      "test_cases": [
          {
              "input": [7],
              "output": true
          },
          {
              "input": [10],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 3,
      "question": "Reverse a String",
      "description": "Write a function that reverses a given string.",
      "constraints": "- The input is a non-empty string.\n- The function should return the reversed string.",
      "test_cases": [
          {
              "input": ["hello"],
              "output": "olleh"
          },
          {
              "input": ["Python"],
              "output": "nohtyP"
          }
      ],
      "marks": 1
  },
  {
      "id": 4,
      "question": "Find the Factorial of a Number",
      "description": "Write a function that returns the factorial of a given non-negative integer.",
      "constraints": "- The input is a non-negative integer.\n- The function should return the factorial value.",
      "test_cases": [
          {
              "input": [5],
              "output": 120
          },
          {
              "input": [0],
              "output": 1
          }
      ],
      "marks": 2
  },
  {
      "id": 5,
      "question": "Find the Largest Element in an Array",
      "description": "Write a function that returns the largest element from a given list of numbers.",
      "constraints": "- The input is a non-empty list of integers.\n- The function should return the maximum integer.",
      "test_cases": [
          {
              "input": [[3, 7, 2, 9, 5]],
              "output": 9
          },
          {
              "input": [[1, 4, 8, 2, 6]],
              "output": 8
          }
      ],
      "marks": 2
  },
  {
      "id": 6,
      "question": "Check if a String is a Palindrome",
      "description": "Write a function that checks whether a given string is a palindrome.",
      "constraints": "- The input is a non-empty string.\n- The function should return True if the string is a palindrome, otherwise False.",
      "test_cases": [
          {
              "input": ["madam"],
              "output": true
          },
          {
              "input": ["hello"],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 7,
      "question": "Calculate the Sum of Digits",
      "description": "Write a function that calculates the sum of digits of a given positive integer.",
      "constraints": "- The input is a positive integer.\n- The function should return an integer representing the sum of its digits.",
      "test_cases": [
          {
              "input": [123],
              "output": 6
          },
          {
              "input": [9876],
              "output": 30
          }
      ],
      "marks": 2
  },
  {
      "id": 8,
      "question": "Check for Armstrong Number",
      "description": "Write a function that checks whether a given number is an Armstrong number.",
      "constraints": "- The input is a positive integer.\n- The function should return True if the number is an Armstrong number, otherwise False.",
      "test_cases": [
          {
              "input": [153],
              "output": true
          },
          {
              "input": [123],
              "output": false
          }
      ],
      "marks": 3
  },
  {
      "id": 9,
      "question": "Find the GCD of Two Numbers",
      "description": "Write a function that returns the greatest common divisor (GCD) of two numbers.",
      "constraints": "- The input consists of two positive integers.\n- The function should return an integer representing the GCD.",
      "test_cases": [
          {
              "input": [12, 18],
              "output": 6
          },
          {
              "input": [101, 103],
              "output": 1
          }
      ],
      "marks": 2
  },
  {
      "id": 10,
      "question": "Find the LCM of Two Numbers",
      "description": "Write a function that returns the least common multiple (LCM) of two numbers.",
      "constraints": "- The input consists of two positive integers.\n- The function should return an integer representing the LCM.",
      "test_cases": [
          {
              "input": [4, 5],
              "output": 20
          },
          {
              "input": [7, 3],
              "output": 21
          }
      ],
      "marks": 2
  },
  {
      "id": 11,
      "question": "Check if a Year is a Leap Year",
      "description": "Write a function that checks whether a given year is a leap year.",
      "constraints": "- The input is a positive integer representing a year.\n- The function should return True if it's a leap year, otherwise False.",
      "test_cases": [
          {
              "input": [2000],
              "output": true
          },
          {
              "input": [1900],
              "output": false
          }
      ],
      "marks": 1
  },
  {
      "id": 12,
      "question": "Generate Fibonacci Series",
      "description": "Write a function that generates the first N numbers in the Fibonacci sequence.",
      "constraints": "- The input is a positive integer N.\n- The function should return a list of N Fibonacci numbers.",
      "test_cases": [
          {
              "input": [5],
              "output": [0, 1, 1, 2, 3]
          },
          {
              "input": [7],
              "output": [0, 1, 1, 2, 3, 5, 8]
          }
      ],
      "marks": 3
  },
  {
      "id": 13,
      "question": "Find the Second Largest Number in a List",
      "description": "Write a function that returns the second largest number in a list.",
      "constraints": "- The input is a list of at least two distinct integers.\n- The function should return an integer representing the second largest number.",
      "test_cases": [
          {
              "input": [[3, 5, 7, 2, 8]],
              "output": 7
          },
          {
              "input": [[10, 20, 30, 40]],
              "output": 30
          }
      ],
      "marks": 2
  },
  {
      "id": 14,
      "question": "Find the Missing Number in an Array",
      "description": "Write a function that finds the missing number in a sequence of 1 to N.",
      "constraints": "- The input is a list of N-1 distinct integers from 1 to N.\n- The function should return the missing integer.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 5]],
              "output": 4
          },
          {
              "input": [[7, 8, 9, 10, 12]],
              "output": 11
          }
      ],
      "marks": 3
  },
  {
      "id": 15,
      "question": "Check if Two Strings are Anagrams",
      "description": "Write a function that checks whether two given strings are anagrams.",
      "constraints": "- The input consists of two strings.\n- The function should return True if they are anagrams, otherwise False.",
      "test_cases": [
          {
              "input": ["listen", "silent"],
              "output": true
          },
          {
              "input": ["hello", "world"],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 16,
      "question": "Count the Vowels in a String",
      "description": "Write a function that counts the number of vowels in a given string.",
      "constraints": "- The input is a non-empty string.\n- The function should return an integer representing the count of vowels.",
      "test_cases": [
          {
              "input": ["hello"],
              "output": 2
          },
          {
              "input": ["education"],
              "output": 5
          }
      ],
      "marks": 1
  },
  {
      "id": 17,
      "question": "Find the Intersection of Two Lists",
      "description": "Write a function that returns the intersection of two lists.",
      "constraints": "- The input consists of two lists of integers.\n- The function should return a list of common elements.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4], [3, 4, 5, 6]],
              "output": [3, 4]
          },
          {
              "input": [[10, 20, 30], [15, 25, 30]],
              "output": [30]
          }
      ],
      "marks": 2
  },
  {
      "id": 18,
      "question": "Find the Union of Two Lists",
      "description": "Write a function that returns the union of two lists.",
      "constraints": "- The input consists of two lists of integers.\n- The function should return a list of unique elements from both lists.",
      "test_cases": [
          {
              "input": [[1, 2, 3], [3, 4, 5]],
              "output": [1, 2, 3, 4, 5]
          },
          {
              "input": [[7, 8], [8, 9, 10]],
              "output": [7, 8, 9, 10]
          }
      ],
      "marks": 2
  },
  {
      "id": 19,
      "question": "Reverse a String",
      "description": "Write a function that reverses a given string.",
      "constraints": "- The input is a non-empty string.\n- The function should return the reversed string.",
      "test_cases": [
          {
              "input": ["hello"],
              "output": "olleh"
          },
          {
              "input": ["world"],
              "output": "dlrow"
          }
      ],
      "marks": 1
  },
  {
      "id": 20,
      "question": "Find the Factorial of a Number",
      "description": "Write a function that computes the factorial of a given number.",
      "constraints": "- The input is a non-negative integer.\n- The function should return an integer representing the factorial.",
      "test_cases": [
          {
              "input": [5],
              "output": 120
          },
          {
              "input": [7],
              "output": 5040
          }
      ],
      "marks": 2
  },
  {
      "id": 21,
      "question": "Find the Maximum Element in a List",
      "description": "Write a function that returns the maximum element from a list of numbers.",
      "constraints": "- The input is a non-empty list of integers.\n- The function should return the largest integer in the list.",
      "test_cases": [
          {
              "input": [[1, 3, 7, 2, 5]],
              "output": 7
          },
          {
              "input": [[10, 20, 15, 30]],
              "output": 30
          }
      ],
      "marks": 1
  },
  {
      "id": 22,
      "question": "Find the Minimum Element in a List",
      "description": "Write a function that returns the minimum element from a list of numbers.",
      "constraints": "- The input is a non-empty list of integers.\n- The function should return the smallest integer in the list.",
      "test_cases": [
          {
              "input": [[4, 2, 8, 6]],
              "output": 2
          },
          {
              "input": [[10, 5, 20, 15]],
              "output": 5
          }
      ],
      "marks": 1
  },
  {
      "id": 23,
      "question": "Find the Sum of Elements in a List",
      "description": "Write a function that calculates the sum of all elements in a list.",
      "constraints": "- The input is a non-empty list of integers.\n- The function should return an integer representing the sum.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 5]],
              "output": 15
          },
          {
              "input": [[10, 20, 30]],
              "output": 60
          }
      ],
      "marks": 1
  },
  {
      "id": 24,
      "question": "Check if a Number is Prime",
      "description": "Write a function that checks whether a given number is prime.",
      "constraints": "- The input is a positive integer.\n- The function should return True if the number is prime, otherwise False.",
      "test_cases": [
          {
              "input": [7],
              "output": true
          },
          {
              "input": [10],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 25,
      "question": "Find the Prime Factors of a Number",
      "description": "Write a function that returns the prime factors of a given number.",
      "constraints": "- The input is a positive integer.\n- The function should return a list of prime factors.",
      "test_cases": [
          {
              "input": [12],
              "output": [2, 2, 3]
          },
          {
              "input": [30],
              "output": [2, 3, 5]
          }
      ],
      "marks": 3
  },
  {
      "id": 26,
      "question": "Check if a List is Sorted",
      "description": "Write a function that checks whether a given list is sorted in ascending order.",
      "constraints": "- The input is a list of integers.\n- The function should return True if sorted, otherwise False.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 5]],
              "output": true
          },
          {
              "input": [[5, 3, 8, 6]],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 27,
      "question": "Find the Most Frequent Element in a List",
      "description": "Write a function that returns the most frequently occurring element in a list.",
      "constraints": "- The input is a non-empty list of integers.\n- The function should return the most frequent element.",
      "test_cases": [
          {
              "input": [[1, 3, 3, 2, 3, 2, 1]],
              "output": 3
          },
          {
              "input": [[10, 20, 20, 30, 30, 30]],
              "output": 30
          }
      ],
      "marks": 3
  },
  {
      "id": 28,
      "question": "Convert Celsius to Fahrenheit",
      "description": "Write a function that converts a given temperature from Celsius to Fahrenheit.",
      "constraints": "- The input is a floating-point number.\n- The function should return a floating-point number.",
      "test_cases": [
          {
              "input": [0],
              "output": 32.0
          },
          {
              "input": [100],
              "output": 212.0
          }
      ],
      "marks": 1
  },
  {
      "id": 29,
      "question": "Convert Fahrenheit to Celsius",
      "description": "Write a function that converts a given temperature from Fahrenheit to Celsius.",
      "constraints": "- The input is a floating-point number.\n- The function should return a floating-point number.",
      "test_cases": [
          {
              "input": [32],
              "output": 0.0
          },
          {
              "input": [212],
              "output": 100.0
          }
      ],
      "marks": 1
  },
  {
      "id": 30,
      "question": "Count the Occurrences of an Element in a List",
      "description": "Write a function that counts how many times a given element appears in a list.",
      "constraints": "- The input consists of a list of integers and an integer to search for.\n- The function should return the count.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 2, 2, 5], 2],
              "output": 3
          },
          {
              "input": [[10, 20, 10, 30, 10, 40], 10],
              "output": 3
          }
      ],
      "marks": 2
  },
  {
      "id": 31,
      "question": "Find the Second Largest Element in a List",
      "description": "Write a function that finds the second largest element in a list of integers.",
      "constraints": "- The input is a list of at least two integers.\n- The function should return the second largest element.",
      "test_cases": [
          {
              "input": [[1, 3, 5, 7, 9]],
              "output": 7
          },
          {
              "input": [[10, 20, 30, 40]],
              "output": 30
          }
      ],
      "marks": 2
  },
  {
      "id": 32,
      "question": "Check if a String is a Palindrome",
      "description": "Write a function that checks whether a given string is a palindrome.",
      "constraints": "- The input is a non-empty string.\n- The function should return True if the string is a palindrome, otherwise False.",
      "test_cases": [
          {
              "input": ["racecar"],
              "output": true
          },
          {
              "input": ["hello"],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 33,
      "question": "Find the GCD of Two Numbers",
      "description": "Write a function that finds the greatest common divisor (GCD) of two numbers.",
      "constraints": "- The input consists of two positive integers.\n- The function should return the GCD.",
      "test_cases": [
          {
              "input": [12, 18],
              "output": 6
          },
          {
              "input": [101, 103],
              "output": 1
          }
      ],
      "marks": 2
  },
  {
      "id": 34,
      "question": "Find the LCM of Two Numbers",
      "description": "Write a function that finds the least common multiple (LCM) of two numbers.",
      "constraints": "- The input consists of two positive integers.\n- The function should return the LCM.",
      "test_cases": [
          {
              "input": [4, 5],
              "output": 20
          },
          {
              "input": [10, 15],
              "output": 30
          }
      ],
      "marks": 2
  },
  {
      "id": 35,
      "question": "Check if a Number is Even or Odd",
      "description": "Write a function that checks if a number is even or odd.",
      "constraints": "- The input is an integer.\n- The function should return 'Even' or 'Odd' accordingly.",
      "test_cases": [
          {
              "input": [8],
              "output": "Even"
          },
          {
              "input": [13],
              "output": "Odd"
          }
      ],
      "marks": 1
  },
  {
      "id": 36,
      "question": "Merge Two Sorted Lists",
      "description": "Write a function that merges two sorted lists into one sorted list.",
      "constraints": "- The input consists of two sorted lists of integers.\n- The function should return a single sorted list.",
      "test_cases": [
          {
              "input": [[1, 3, 5], [2, 4, 6]],
              "output": [1, 2, 3, 4, 5, 6]
          },
          {
              "input": [[10, 20], [15, 25]],
              "output": [10, 15, 20, 25]
          }
      ],
      "marks": 3
  },
  {
      "id": 37,
      "question": "Find the Nth Fibonacci Number",
      "description": "Write a function that returns the nth Fibonacci number.",
      "constraints": "- The input is a non-negative integer n.\n- The function should return the nth Fibonacci number.",
      "test_cases": [
          {
              "input": [5],
              "output": 5
          },
          {
              "input": [7],
              "output": 13
          }
      ],
      "marks": 3
  },
  {
      "id": 38,
      "question": "Find the Intersection of Two Lists",
      "description": "Write a function that finds the common elements between two lists.",
      "constraints": "- The input consists of two lists of integers.\n- The function should return a list of common elements.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4], [3, 4, 5, 6]],
              "output": [3, 4]
          },
          {
              "input": [[10, 20, 30], [20, 40, 50]],
              "output": [20]
          }
      ],
      "marks": 2
  },
  {
      "id": 39,
      "question": "Find the Union of Two Lists",
      "description": "Write a function that finds the union of two lists.",
      "constraints": "- The input consists of two lists of integers.\n- The function should return a list of unique elements from both lists.",
      "test_cases": [
          {
              "input": [[1, 2, 3], [3, 4, 5]],
              "output": [1, 2, 3, 4, 5]
          },
          {
              "input": [[10, 20], [20, 30]],
              "output": [10, 20, 30]
          }
      ],
      "marks": 2
  },
  {
      "id": 40,
      "question": "Find the Missing Number in a Sequence",
      "description": "Write a function that finds the missing number in a sequence of consecutive numbers.",
      "constraints": "- The input is a list of n-1 numbers from a sequence of size n.\n- The function should return the missing number.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 5]],
              "output": 4
          },
          {
              "input": [[10, 11, 13, 14]],
              "output": 12
          }
      ],
      "marks": 3
  },
  {
      "id": 41,
      "question": "Check if a Number is Prime",
      "description": "Write a function that checks whether a given number is prime.",
      "constraints": "- The input is a positive integer greater than 1.\n- The function should return True if the number is prime, otherwise False.",
      "test_cases": [
          {
              "input": [7],
              "output": true
          },
          {
              "input": [10],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 42,
      "question": "Reverse a String",
      "description": "Write a function that reverses a given string.",
      "constraints": "- The input is a non-empty string.\n- The function should return the reversed string.",
      "test_cases": [
          {
              "input": ["hello"],
              "output": "olleh"
          },
          {
              "input": ["world"],
              "output": "dlrow"
          }
      ],
      "marks": 2
  },
  {
      "id": 43,
      "question": "Find the Factorial of a Number",
      "description": "Write a function that computes the factorial of a given number.",
      "constraints": "- The input is a non-negative integer.\n- The function should return the factorial of the number.",
      "test_cases": [
          {
              "input": [5],
              "output": 120
          },
          {
              "input": [7],
              "output": 5040
          }
      ],
      "marks": 3
  },
  {
      "id": 44,
      "question": "Find the Largest Element in a List",
      "description": "Write a function that finds the largest element in a list of numbers.",
      "constraints": "- The input is a non-empty list of numbers.\n- The function should return the largest number.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 5]],
              "output": 5
          },
          {
              "input": [[10, 20, 30, 40]],
              "output": 40
          }
      ],
      "marks": 2
  },
  {
      "id": 45,
      "question": "Convert Celsius to Fahrenheit",
      "description": "Write a function that converts a temperature from Celsius to Fahrenheit.",
      "constraints": "- The input is a numerical value representing Celsius.\n- The function should return the Fahrenheit equivalent.",
      "test_cases": [
          {
              "input": [0],
              "output": 32
          },
          {
              "input": [100],
              "output": 212
          }
      ],
      "marks": 1
  },
  {
      "id": 46,
      "question": "Check if a Year is a Leap Year",
      "description": "Write a function that determines whether a given year is a leap year.",
      "constraints": "- The input is a positive integer representing a year.\n- The function should return True if it is a leap year, otherwise False.",
      "test_cases": [
          {
              "input": [2000],
              "output": true
          },
          {
              "input": [1900],
              "output": false
          }
      ],
      "marks": 2
  },
  {
      "id": 47,
      "question": "Sum of Digits of a Number",
      "description": "Write a function that calculates the sum of the digits of a given number.",
      "constraints": "- The input is a positive integer.\n- The function should return the sum of its digits.",
      "test_cases": [
          {
              "input": [123],
              "output": 6
          },
          {
              "input": [456],
              "output": 15
          }
      ],
      "marks": 2
  },
  {
      "id": 48,
      "question": "Count the Number of Vowels in a String",
      "description": "Write a function that counts the number of vowels in a given string.",
      "constraints": "- The input is a non-empty string.\n- The function should return the count of vowels (a, e, i, o, u).",
      "test_cases": [
          {
              "input": ["hello"],
              "output": 2
          },
          {
              "input": ["world"],
              "output": 1
          }
      ],
      "marks": 2
  },
  {
      "id": 49,
      "question": "Find the Median of a List",
      "description": "Write a function that finds the median of a list of numbers.",
      "constraints": "- The input is a non-empty list of numbers.\n- The function should return the median value.",
      "test_cases": [
          {
              "input": [[1, 3, 5, 7, 9]],
              "output": 5
          },
          {
              "input": [[10, 20, 30, 40, 50]],
              "output": 30
          }
      ],
      "marks": 3
  },
  {
      "id": 50,
      "question": "Convert a Decimal Number to Binary",
      "description": "Write a function that converts a decimal number to its binary representation.",
      "constraints": "- The input is a non-negative integer.\n- The function should return the binary representation as a string.",
      "test_cases": [
          {
              "input": [5],
              "output": "101"
          },
          {
              "input": [10],
              "output": "1010"
          }
      ],
      "marks": 3
  }
      ],
      "coding_5mark": [
         
{
  "id": 1,
  "title": "Find the Second Largest Number",
  "scenario": "Given a list of numbers, you need to find the second largest number.",
  "question": "Write a function that returns the second largest number in a list.",
  "description": "The function should traverse the list and determine the second largest number without using built-in sorting functions.",
  "constraints": "The list contains at least two distinct numbers.",
  "sample_input": [12, 35, 1, 10, 34, 1],
  "sample_output": 34
},
{
  "id": 2,
  "title": "Count the Frequency of Each Element",
  "scenario": "Given a list, determine the frequency of each element.",
  "question": "Write a function that returns a dictionary with the count of each unique element.",
  "description": "Traverse the list and maintain a count of each unique number.",
  "constraints": "The list contains integers.",
  "sample_input": [1, 2, 2, 3, 3, 3, 4],
  "sample_output": { "1": 1, "2": 2, "3": 3, "4": 1 }
},
{
  "id": 3,
  "title": "Find the Missing Number in a Consecutive List",
  "scenario": "Given a list of numbers from 1 to n with one number missing, determine the missing number.",
  "question": "Write a function to find the missing number.",
  "description": "The function should determine the missing number in a range of 1 to n.",
  "constraints": "The list contains n-1 elements.",
  "sample_input": [1, 2, 4, 5, 6],
  "sample_output": 3
},
{
  "id": 4,
  "title": "Rotate a List by K Positions",
  "scenario": "Given a list, rotate it k positions to the right.",
  "question": "Write a function that rotates a list by k positions.",
  "description": "The function should move elements to the right while maintaining order.",
  "constraints": "k is a non-negative integer.",
  "sample_input": { "list": [1, 2, 3, 4, 5], "k": 2 },
  "sample_output": [4, 5, 1, 2, 3]
},
{
  "id": 5,
  "title": "Find the Longest Word in a Sentence",
  "scenario": "Given a sentence, find the longest word.",
  "question": "Write a function to return the longest word in a given sentence.",
  "description": "The function should split the sentence into words and return the longest one.",
  "constraints": "The sentence contains only alphabets and spaces.",
  "sample_input": "The quick brown fox jumped over the lazy dog",
  "sample_output": "jumped"
},
{
  "id": 6,
  "title": "Find the First Non-Repeating Character in a String",
  "scenario": "Given a string, find the first character that appears only once.",
  "question": "Write a function that returns the first non-repeating character.",
  "description": "The function should traverse the string and identify the first character that appears only once.",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "swiss",
  "sample_output": "w"
},
{
  "id": 7,
  "title": "Merge Two Sorted Lists",
  "scenario": "Given two sorted lists, merge them into one sorted list.",
  "question": "Write a function that merges two sorted lists.",
  "description": "The function should merge two sorted lists into a single sorted list without duplicates.",
  "constraints": "Both lists contain only integers.",
  "sample_input": { "list1": [1, 3, 5], "list2": [2, 4, 6] },
  "sample_output": [1, 2, 3, 4, 5, 6]
},
{
  "id": 8,
  "title": "Remove Duplicates from a List",
  "scenario": "Given a list, remove all duplicate elements.",
  "question": "Write a function that removes duplicates from a list.",
  "description": "The function should return a new list with only unique elements.",
  "constraints": "The list contains only integers.",
  "sample_input": [1, 2, 2, 3, 4, 4, 5],
  "sample_output": [1, 2, 3, 4, 5]
},
{
  "id": 9,
  "title": "Convert Roman Numerals to Integers",
  "scenario": "Given a Roman numeral, convert it to an integer.",
  "question": "Write a function that converts a Roman numeral to an integer.",
  "description": "The function should correctly interpret Roman numeral rules.",
  "constraints": "The input is a valid Roman numeral.",
  "sample_input": "XIV",
  "sample_output": 14
},
{
  "id": 10,
  "title": "Find All Pairs in a List that Sum to a Given Number",
  "scenario": "Given a list and a target sum, find all pairs that sum to the target.",
  "question": "Write a function that returns all pairs that sum to the target number.",
  "description": "The function should return all pairs as tuples.",
  "constraints": "The list contains only integers.",
  "sample_input": { "list": [1, 2, 3, 4, 5], "target": 5 },
  "sample_output": [[1, 4], [2, 3]]
},
{
  "id": 11,
  "title": "Check for Palindrome",
  "scenario": "Given a string, check if it is a palindrome.",
  "question": "Write a function that checks if a given string is a palindrome.",
  "description": "The function should return true if the string reads the same forward and backward.",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "racecar",
  "sample_output": true
},
{
  "id": 12,
  "title": "Find the Intersection of Two Lists",
  "scenario": "Given two lists, find their common elements.",
  "question": "Write a function that returns a list of common elements between two lists.",
  "description": "The function should return a list containing elements that appear in both lists.",
  "constraints": "The lists contain only integers.",
  "sample_input": { "list1": [1, 2, 3, 4], "list2": [3, 4, 5, 6] },
  "sample_output": [3, 4]
},
{
  "id": 13,
  "title": "Reverse a String",
  "scenario": "Given a string, return its reverse.",
  "question": "Write a function that reverses a string.",
  "description": "The function should return the string with its characters in reverse order.",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "hello",
  "sample_output": "olleh"
},
{
  "id": 14,
  "title": "Check for Anagrams",
  "scenario": "Given two strings, check if they are anagrams.",
  "question": "Write a function that checks if two words are anagrams.",
  "description": "The function should return true if the two words contain the same letters in a different order.",
  "constraints": "The words contain only lowercase letters.",
  "sample_input": { "word1": "listen", "word2": "silent" },
  "sample_output": true
},
{
  "id": 15,
  "title": "Generate Fibonacci Sequence",
  "scenario": "Given a number n, generate the first n Fibonacci numbers.",
  "question": "Write a function that returns the first n Fibonacci numbers.",
  "description": "The function should generate the Fibonacci sequence up to n terms.",
  "constraints": "n is a positive integer.",
  "sample_input": 5,
  "sample_output": [0, 1, 1, 2, 3]
},
{
  "id": 16,
  "title": "Check if a Number is Prime",
  "scenario": "Given a number, determine if it is prime.",
  "question": "Write a function that checks if a number is prime.",
  "description": "The function should return true if the number is prime, otherwise false.",
  "constraints": "n is a positive integer.",
  "sample_input": 7,
  "sample_output": true
},
{
  "id": 17,
  "title": "Find the GCD of Two Numbers",
  "scenario": "Given two numbers, find their greatest common divisor.",
  "question": "Write a function that returns the greatest common divisor (GCD) of two numbers.",
  "description": "The function should use the Euclidean algorithm to find the GCD.",
  "constraints": "Both numbers are positive integers.",
  "sample_input": { "a": 56, "b": 98 },
  "sample_output": 14
},
{
  "id": 18,
  "title": "Find the LCM of Two Numbers",
  "scenario": "Given two numbers, find their least common multiple.",
  "question": "Write a function that returns the least common multiple (LCM) of two numbers.",
  "description": "The function should use the formula LCM(a, b) = (a * b) / GCD(a, b).",
  "constraints": "Both numbers are positive integers.",
  "sample_input": { "a": 4, "b": 6 },
  "sample_output": 12
},
{
  "id": 19,
  "title": "Sort a List",
  "scenario": "Given a list of numbers, return it in sorted order.",
  "question": "Write a function that sorts a list in ascending order.",
  "description": "The function should implement a sorting algorithm.",
  "constraints": "The list contains only integers.",
  "sample_input": [3, 1, 4, 1, 5, 9],
  "sample_output": [1, 1, 3, 4, 5, 9]
},
{
  "id": 20,
  "title": "Find the Factorial of a Number",
  "scenario": "Given a number n, compute its factorial.",
  "question": "Write a function that returns the factorial of n.",
  "description": "The function should use recursion or iteration to compute the factorial.",
  "constraints": "n is a non-negative integer.",
  "sample_input": 5,
  "sample_output": 120
},
{
  "id": 21,
  "title": "Check if a List is Sorted",
  "scenario": "Given a list, determine if it is sorted in ascending order.",
  "question": "Write a function that checks if a list is sorted.",
  "description": "The function should return true if the list is sorted, otherwise false.",
  "constraints": "The list contains only integers.",
  "sample_input": [1, 2, 3, 4, 5],
  "sample_output": true
},
{
  "id": 22,
  "title": "Find the Median of a List",
  "scenario": "Given a list of numbers, find the median value.",
  "question": "Write a function that returns the median of a list.",
  "description": "The function should compute the middle value of a sorted list.",
  "constraints": "The list contains at least one number.",
  "sample_input": [1, 3, 5, 7, 9],
  "sample_output": 5
},
{
  "id": 23,
  "title": "Find the Mode of a List",
  "scenario": "Given a list of numbers, find the most frequently occurring number.",
  "question": "Write a function that returns the mode of a list.",
  "description": "The function should identify the most common number in the list.",
  "constraints": "The list contains at least one number.",
  "sample_input": [1, 2, 2, 3, 3, 3, 4],
  "sample_output": 3
},
{
  "id": 24,
  "title": "Binary Search in a Sorted List",
  "scenario": "Given a sorted list, find the index of a target number.",
  "question": "Write a function that performs binary search on a sorted list.",
  "description": "The function should return the index of the target number, or -1 if not found.",
  "constraints": "The list is sorted in ascending order.",
  "sample_input": { "list": [1, 2, 3, 4, 5], "target": 3 },
  "sample_output": 2
},
{
  "id": 25,
  "title": "Reverse a Linked List",
  "scenario": "Given a singly linked list, reverse its order.",
  "question": "Write a function that reverses a singly linked list.",
  "description": "The function should modify the list so that the order of nodes is reversed.",
  "constraints": "The list contains at least one node.",
  "sample_input": [1, 2, 3, 4, 5],
  "sample_output": [5, 4, 3, 2, 1]
},
{
  "id": 26,
  "title": "Merge Two Sorted Lists",
  "scenario": "Given two sorted lists, merge them into one sorted list.",
  "question": "Write a function that merges two sorted lists into one sorted list.",
  "description": "The function should return a single sorted list containing all elements from both lists.",
  "constraints": "The lists contain only integers.",
  "sample_input": { "list1": [1, 3, 5], "list2": [2, 4, 6] },
  "sample_output": [1, 2, 3, 4, 5, 6]
},
{
  "id": 27,
  "title": "Find the First Non-Repeating Character",
  "scenario": "Given a string, find the first character that does not repeat.",
  "question": "Write a function that finds the first non-repeating character in a string.",
  "description": "The function should return the first unique character.",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "swiss",
  "sample_output": "w"
},
{
  "id": 28,
  "title": "Count the Number of Vowels",
  "scenario": "Given a string, count the number of vowels.",
  "question": "Write a function that counts the number of vowels in a string.",
  "description": "The function should return the count of vowels (a, e, i, o, u).",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "hello",
  "sample_output": 2
},
{
  "id": 29,
  "title": "Check if a Number is a Power of Two",
  "scenario": "Given a number, determine if it is a power of two.",
  "question": "Write a function that checks if a number is a power of two.",
  "description": "The function should return true if the number is a power of two, otherwise false.",
  "constraints": "The number is a positive integer.",
  "sample_input": 8,
  "sample_output": true
},
{
  "id": 30,
  "title": "Find the Missing Number",
  "scenario": "Given a list of consecutive numbers with one missing, find the missing number.",
  "question": "Write a function that finds the missing number in a list.",
  "description": "The function should return the missing number from the sequence.",
  "constraints": "The list contains unique integers in a consecutive range.",
  "sample_input": [1, 2, 4, 5, 6],
  "sample_output": 3
},
{
  "id": 31,
  "title": "Find the Largest Element in a List",
  "scenario": "Given a list of numbers, find the largest element.",
  "question": "Write a function that returns the largest number in a list.",
  "description": "The function should return the maximum element.",
  "constraints": "The list contains at least one integer.",
  "sample_input": [1, 3, 7, 2, 5],
  "sample_output": 7
},
{
  "id": 32,
  "title": "Check for Balanced Parentheses",
  "scenario": "Given a string of brackets, check if they are balanced.",
  "question": "Write a function that checks if a string contains balanced parentheses.",
  "description": "The function should return true if the parentheses are balanced.",
  "constraints": "The string contains only '(', ')', '{', '}', '[', ']'.",
  "sample_input": "{[()]}",
  "sample_output": true
},
{
  "id": 33,
  "title": "Find the Longest Common Prefix",
  "scenario": "Given a list of strings, find the longest common prefix.",
  "question": "Write a function that returns the longest common prefix of a list of strings.",
  "description": "The function should return the longest prefix that all words share.",
  "constraints": "The list contains only lowercase letters.",
  "sample_input": ["flower", "flow", "flight"],
  "sample_output": "fl"
},
{
  "id": 34,
  "title": "Find the Majority Element",
  "scenario": "Given a list of numbers, find the majority element.",
  "question": "Write a function that returns the element that appears more than n/2 times.",
  "description": "The function should find and return the majority element.",
  "constraints": "The list contains only integers.",
  "sample_input": [3, 3, 4, 2, 3, 3, 3],
  "sample_output": 3
},
{
  "id": 35,
  "title": "Find the Second Largest Element",
  "scenario": "Given a list of numbers, find the second largest element.",
  "question": "Write a function that returns the second largest number in a list.",
  "description": "The function should return the second largest element.",
  "constraints": "The list contains at least two unique integers.",
  "sample_input": [1, 5, 3, 9, 7],
  "sample_output": 7
},
{
  "id": 36,
  "title": "Check for a Perfect Square",
  "scenario": "Given a number, check if it is a perfect square.",
  "question": "Write a function that checks if a number is a perfect square.",
  "description": "The function should return true if the number is a perfect square.",
  "constraints": "The number is a positive integer.",
  "sample_input": 16,
  "sample_output": true
},
{
  "id": 37,
  "title": "Find All Duplicates in a List",
  "scenario": "Given a list of numbers, find all duplicates.",
  "question": "Write a function that returns a list of duplicate numbers.",
  "description": "The function should return a list of numbers that appear more than once.",
  "constraints": "The list contains only integers.",
  "sample_input": [4, 3, 2, 7, 8, 2, 3, 1],
  "sample_output": [2, 3]
},
{
  "id": 38,
  "title": "Rotate a List",
  "scenario": "Given a list and a rotation count, rotate the list.",
  "question": "Write a function that rotates a list k times to the right.",
  "description": "The function should return the rotated list.",
  "constraints": "The list contains only integers, and k is a non-negative integer.",
  "sample_input": { "list": [1, 2, 3, 4, 5], "k": 2 },
  "sample_output": [4, 5, 1, 2, 3]
},
{
  "id": 39,
  "title": "Find the Longest Palindromic Substring",
  "scenario": "Given a string, find the longest palindromic substring.",
  "question": "Write a function that returns the longest palindromic substring.",
  "description": "The function should return the longest contiguous substring that is a palindrome.",
  "constraints": "The string contains only lowercase letters.",
  "sample_input": "babad",
  "sample_output": "bab"
},
{
  "id": 40,
  "title": "Check for Armstrong Number",
  "scenario": "Given a number, check if it is an Armstrong number.",
  "question": "Write a function that checks if a number is an Armstrong number.",
  "description": "The function should return true if the sum of the cubes of its digits equals the number.",
  "constraints": "The number is a positive integer.",
  "sample_input": 153,
  "sample_output": true
},
         
{
  "id": 41,
  "title": "Find the Intersection of Two Lists",
  "scenario": "Given two lists, find the common elements.",
  "question": "Write a function that returns the intersection of two lists.",
  "description": "The function should return a list of elements that are present in both lists.",
  "constraints": "The lists contain only integers.",
  "sample_input": { "list1": [1, 2, 3, 4], "list2": [3, 4, 5, 6] },
  "sample_output": [3, 4]
},
{
  "id": 42,
  "title": "Find the GCD of Two Numbers",
  "scenario": "Given two numbers, find their greatest common divisor.",
  "question": "Write a function that returns the greatest common divisor (GCD) of two numbers.",
  "description": "The function should return the largest number that divides both numbers without a remainder.",
  "constraints": "The numbers are positive integers.",
  "sample_input": { "num1": 48, "num2": 18 },
  "sample_output": 6
},
{
  "id": 43,
  "title": "Find the LCM of Two Numbers",
  "scenario": "Given two numbers, find their least common multiple.",
  "question": "Write a function that returns the least common multiple (LCM) of two numbers.",
  "description": "The function should return the smallest number that is a multiple of both numbers.",
  "constraints": "The numbers are positive integers.",
  "sample_input": { "num1": 4, "num2": 6 },
  "sample_output": 12
},
{
  "id": 44,
  "title": "Check if a String is a Rotation of Another",
  "scenario": "Given two strings, check if one is a rotation of the other.",
  "question": "Write a function that checks if one string is a rotation of another.",
  "description": "The function should return true if one string can be obtained by rotating another.",
  "constraints": "The strings contain only lowercase letters.",
  "sample_input": { "str1": "waterbottle", "str2": "erbottlewat" },
  "sample_output": true
},
{
  "id": 45,
  "title": "Find the Maximum Subarray Sum",
  "scenario": "Given a list of numbers, find the subarray with the maximum sum.",
  "question": "Write a function that returns the sum of the maximum subarray.",
  "description": "The function should return the maximum sum of any contiguous subarray.",
  "constraints": "The list contains at least one integer.",
  "sample_input": [-2, 1, -3, 4, -1, 2, 1, -5, 4],
  "sample_output": 6
},
{
  "id": 46,
  "title": "Check if a Number is a Palindrome",
  "scenario": "Given a number, check if it reads the same backward as forward.",
  "question": "Write a function that checks if a number is a palindrome.",
  "description": "The function should return true if the number is the same when reversed.",
  "constraints": "The number is a positive integer.",
  "sample_input": 121,
  "sample_output": true
},
{
  "id": 47,
  "title": "Find the Kth Largest Element",
  "scenario": "Given a list of numbers, find the Kth largest element.",
  "question": "Write a function that returns the Kth largest element in a list.",
  "description": "The function should return the Kth largest element in the sorted order.",
  "constraints": "The list contains at least K unique integers.",
  "sample_input": { "list": [3, 2, 1, 5, 6, 4], "k": 2 },
  "sample_output": 5
},
{
  "id": 48,
  "title": "Find the Product of an Array Except Self",
  "scenario": "Given an array, return an array where each element is the product of all other elements except itself.",
  "question": "Write a function that returns an array where each element is the product of all other elements except itself.",
  "description": "The function should return an array with the product of all other elements except the current one.",
  "constraints": "The list contains only integers.",
  "sample_input": [1, 2, 3, 4],
  "sample_output": [24, 12, 8, 6]
},
{
  "id": 49,
  "title": "Find the Single Number",
  "scenario": "Given a list where every number appears twice except one, find the unique number.",
  "question": "Write a function that returns the number that appears only once.",
  "description": "The function should return the unique number that does not have a duplicate.",
  "constraints": "The list contains only integers.",
  "sample_input": [4, 1, 2, 1, 2],
  "sample_output": 4
},
{
  "id": 50,
  "title": "Find the Longest Consecutive Sequence",
  "scenario": "Given a list of numbers, find the length of the longest consecutive sequence.",
  "question": "Write a function that returns the length of the longest consecutive sequence.",
  "description": "The function should return the maximum length of consecutive numbers in the list.",
  "constraints": "The list contains only integers.",
  "sample_input": [100, 4, 200, 1, 3, 2],
  "sample_output": 4
}
]
  },
  "hard": {
      "mcq": [
          {
              "id": 1,
              "question": "What will be the output of the following code?\n\n```python\nclass A:\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x\n\na = A(10)\nb = A(10)\nprint(a == b, a is b)\n```",
              "options": {
                "a": "True, True",
                "b": "False, True",
                "c": "True, False",
                "d": "False, False",
                "e": "Error",
                "f": "None"
              },
              "answer": "c"
            },
            {
              "id": 2,
              "question": "What does dir() return when called without arguments?",
              "options": {
                "a": "A list of all built-in functions",
                "b": "A list of all available modules",
                "c": "A list of all attributes in the current scope",
                "d": "The names of the variables currently in memory",
                "e": "None",
                "f": "Error"
              },
              "answer": "c"
            },
            {
              "id": 3,
              "question": "What will be the output of the following code?\n\n```python\nclass A:\n    def __init__(self):\n        self.data = []\n    def add(self, item):\n        self.data.append(item)\n\na = A()\nb = a\nb.add(10)\nprint(a.data)\n```",
              "options": {
                "a": "[]",
                "b": "[10]",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "[10, 10]"
              },
              "answer": "b"
            },
            {
              "id": 4,
              "question": "What is the time complexity of inserting an element at the beginning of a list?",
              "options": {
                "a": "O(1)",
                "b": "O(n)",
                "c": "O(log n)",
                "d": "O(n^2)",
                "e": "Undefined",
                "f": "None"
              },
              "answer": "b"
            },
            {
              "id": 5,
              "question": "What does the following Python code output?\n\n```python\nprint(any([]), all([]))\n```",
              "options": {
                "a": "False, False",
                "b": "True, False",
                "c": "False, True",
                "d": "True, True",
                "e": "Error",
                "f": "None"
              },
              "answer": "c"
            },
            {
              "id": 6,
              "question": "What is the difference between `is` and `==` in Python?",
              "options": {
                "a": "`is` checks for object identity, `==` checks for value equality",
                "b": "`is` checks for value equality, `==` checks for object identity",
                "c": "`is` is a method, `==` is an operator",
                "d": "`is` and `==` are identical",
                "e": "None",
                "f": "Error"
              },
              "answer": "a"
            },
            {
              "id": 7,
              "question": "What is the output of the following code?\n\n```python\na = [1, 2, 3]\nb = a\nc = a[:]\na.append(4)\nprint(b, c)\n```",
              "options": {
                "a": "[1, 2, 3, 4], [1, 2, 3]",
                "b": "[1, 2, 3], [1, 2, 3]",
                "c": "[1, 2, 3, 4], [1, 2, 3, 4]",
                "d": "[1, 2, 3], [1, 2, 3, 4]",
                "e": "Error",
                "f": "None"
              },
              "answer": "a"
            },
            {
              "id": 8,
              "question": "What does the `__slots__` attribute do in a class?",
              "options": {
                "a": "Prevents dynamic attribute creation",
                "b": "Improves performance",
                "c": "Saves memory",
                "d": "All of the above",
                "e": "None",
                "f": "Error"
              },
              "answer": "d"
            },
            {
              "id": 9,
              "question": "What is the output of the following code?\n\n```python\ndef foo(a, b=[]):\n    b.append(a)\n    return b\n\nprint(foo(1))\nprint(foo(2))\n```",
              "options": {
                "a": "[1], [2]",
                "b": "[1], [1, 2]",
                "c": "[1, 2], [1, 2]",
                "d": "Error",
                "e": "None",
                "f": "[2], [2]"
              },
              "answer": "b"
            },
            {
              "id": 10,
              "question": "What will the following code output?\n\n```python\nfrom collections import deque\nq = deque(maxlen=3)\nq.append(1)\nq.append(2)\nq.append(3)\nq.append(4)\nprint(q)\n```",
              "options": {
                "a": "deque([1, 2, 3])",
                "b": "deque([2, 3, 4])",
                "c": "deque([1, 2, 4])",
                "d": "deque([3, 4])",
                "e": "Error",
                "f": "None"
              },
              "answer": "b"
            },
            {
              "id": 11,
              "question": "What will the following code output?\n\n```python\ndef foo(x, y=[]):\n    y.append(x)\n    return y\n\nprint(foo(1))\nprint(foo(2, []))\nprint(foo(3))\n```",
              "options": {
                "a": "[1], [2], [3]",
                "b": "[1], [2], [1, 3]",
                "c": "[1, 3], [2], [1, 3]",
                "d": "Error",
                "e": "None",
                "f": "[1], [2], [3, 1]"
              },
              "answer": "b"
            },
            {
              "id": 12,
              "question": "What will the following code output?\n\n```python\nprint(bool('False'))\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "a"
            },
            {
              "id": 13,
              "question": "What is the output of the following code?\n\n```python\nprint({1, 2, 3} & {2, 3, 4})\n```",
              "options": {
                "a": "{1, 2, 3, 4}",
                "b": "{2, 3}",
                "c": "{1, 4}",
                "d": "Error",
                "e": "None",
                "f": "{}"
              },
              "answer": "b"
            },
            {
              "id": 14,
              "question": "What is the output of the following code?\n\n```python\nprint(type({}))\n```",
              "options": {
                "a": "<class 'set'>",
                "b": "<class 'dict'>",
                "c": "<class 'list'>",
                "d": "Error",
                "e": "None",
                "f": "<class 'tuple'>"
              },
              "answer": "b"
            },
            {
              "id": 15,
              "question": "What will be the output of the following code?\n\n```python\nx = 10\ndef foo():\n    global x\n    x = 20\n    print(x)\nfoo()\nprint(x)\n```",
              "options": {
                "a": "10, 10",
                "b": "10, 20",
                "c": "20, 20",
                "d": "20, 10",
                "e": "Error",
                "f": "None"
              },
              "answer": "c"
            },
            {
              "id": 16,
              "question": "What will be the output of the following code?\n\n```python\nx = (i for i in range(3))\nprint(list(x))\nprint(list(x))\n```",
              "options": {
                "a": "[0, 1, 2], [0, 1, 2]",
                "b": "[0, 1, 2], []",
                "c": "[], [0, 1, 2]",
                "d": "Error",
                "e": "None",
                "f": "[0, 1, 2], [0, 1, 2, 0, 1, 2]"
              },
              "answer": "b"
            },
            {
              "id": 17,
              "question": "Which of the following statements about Python memory management is true?",
              "options": {
                "a": "Python uses manual memory management",
                "b": "Python uses garbage collection",
                "c": "Python does not allocate memory dynamically",
                "d": "Python uses reference counting and garbage collection",
                "e": "None",
                "f": "Error"
              },
              "answer": "d"
            },
            {
              "id": 18,
              "question": "What will be the output of the following code?\n\n```python\nprint([i for i in range(5) if i % 2])\n```",
              "options": {
                "a": "[0, 1, 2, 3, 4]",
                "b": "[1, 3]",
                "c": "[0, 2, 4]",
                "d": "Error",
                "e": "None",
                "f": "[2, 4]"
              },
              "answer": "b"
            },
            {
              "id": 19,
              "question": "What does the following Python expression return?\n\n```python\n5 in {1, 2, 3, 4}\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "b"
            },
            {
              "id": 20,
              "question": "What is the output of the following code?\n\n```python\nprint(' '.join(['Hello', 'World']))\n```",
              "options": {
                "a": "HelloWorld",
                "b": "Hello World",
                "c": "['Hello', 'World']",
                "d": "Error",
                "e": "None",
                "f": "Hello,World"
              },
              "answer": "b"
            },
            {
              "id": 21,
              "question": "What is the output of the following code?\n\n```python\nprint(3 * 'abc')\n```",
              "options": {
                "a": "'abcabcabc'",
                "b": "'abc abc abc'",
                "c": "'abc, abc, abc'",
                "d": "Error",
                "e": "None",
                "f": "'abc\\nabc\\nabc'"
              },
              "answer": "a"
            },
            {
              "id": 22,
              "question": "What is the output of the following code?\n\n```python\nprint(bool([]))\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "b"
            },
            {
              "id": 23,
              "question": "What is the output of the following code?\n\n```python\nprint((1, 2, 3) + (4, 5))\n```",
              "options": {
                "a": "(1, 2, 3, 4, 5)",
                "b": "([1, 2, 3], [4, 5])",
                "c": "{1, 2, 3, 4, 5}",
                "d": "Error",
                "e": "None",
                "f": "[1, 2, 3, 4, 5]"
              },
              "answer": "a"
            },
            {
              "id": 24,
              "question": "What does the following Python expression return?\n\n```python\n'Hello'[::-1]\n```",
              "options": {
                "a": "'Hello'",
                "b": "'olleH'",
                "c": "'H'",
                "d": "Error",
                "e": "None",
                "f": "'Hell'"
              },
              "answer": "b"
            },
            {
              "id": 25,
              "question": "What is the output of the following code?\n\n```python\nprint(list(range(3, 10, 2)))\n```",
              "options": {
                "a": "[3, 5, 7, 9]",
                "b": "[3, 4, 5, 6, 7, 8, 9]",
                "c": "[3, 5, 7, 10]",
                "d": "Error",
                "e": "None",
                "f": "[3, 6, 9]"
              },
              "answer": "a"
            },
            {
              "id": 26,
              "question": "What is the output of the following code?\n\n```python\nprint(bool(' '))\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "a"
            },
            {
              "id": 27,
              "question": "What is the output of the following code?\n\n```python\nprint(set([1, 2, 2, 3, 4, 4]))\n```",
              "options": {
                "a": "{1, 2, 3, 4}",
                "b": "[1, 2, 2, 3, 4, 4]",
                "c": "Error",
                "d": "None",
                "e": "{}",
                "f": "[1, 2, 3, 4]"
              },
              "answer": "a"
            },
            {
              "id": 28,
              "question": "What will be the output of the following code?\n\n```python\ndef foo(x=[]):\n    x.append(1)\n    return x\n\nprint(foo())\nprint(foo())\n```",
              "options": {
                "a": "[1], [1]",
                "b": "[1], [1, 1]",
                "c": "Error",
                "d": "None",
                "e": "[1, 2], [1, 2, 3]",
                "f": "[]"
              },
              "answer": "b"
            },
            {
              "id": 29,
              "question": "What does `isinstance(5.0, int)` return?",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "b"
            },
            {
              "id": 30,
              "question": "What is the output of the following code?\n\n```python\nprint(type(3 / 2))\n```",
              "options": {
                "a": "<class 'int'>",
                "b": "<class 'float'>",
                "c": "<class 'str'>",
                "d": "Error",
                "e": "None",
                "f": "<class 'complex'>"
              },
              "answer": "b"
            },
            {
              "id": 31,
              "question": "What will be the output of the following code?\n\n```python\ndef foo(x, y):\n    return x if x > y else y\n\nprint(foo(3, 7))\n```",
              "options": {
                "a": "3",
                "b": "7",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "10"
              },
              "answer": "b"
            },
            {
              "id": 32,
              "question": "What will the following code output?\n\n```python\ndef foo():\n    return\nprint(foo())\n```",
              "options": {
                "a": "None",
                "b": "0",
                "c": "Error",
                "d": "Undefined",
                "e": "Empty String",
                "f": "False"
              },
              "answer": "a"
            },
            {
              "id": 33,
              "question": "What is the output of the following code?\n\n```python\nprint(type([]) is list)\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "0"
              },
              "answer": "a"
            },
            {
              "id": 34,
              "question": "Which of the following is an immutable data type in Python?",
              "options": {
                "a": "list",
                "b": "set",
                "c": "tuple",
                "d": "dict",
                "e": "None",
                "f": "Error"
              },
              "answer": "c"
            },
            {
              "id": 35,
              "question": "What will be the output of the following code?\n\n```python\nprint(bool('False'))\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "0",
                "f": "Undefined"
              },
              "answer": "a"
            },
            {
              "id": 36,
              "question": "What is the output of the following code?\n\n```python\nprint(len('Python'))\n```",
              "options": {
                "a": "6",
                "b": "7",
                "c": "5",
                "d": "Error",
                "e": "None",
                "f": "0"
              },
              "answer": "a"
            },
            {
              "id": 37,
              "question": "Which of the following data structures supports FIFO (First In, First Out)?",
              "options": {
                "a": "Stack",
                "b": "Queue",
                "c": "Set",
                "d": "Dictionary",
                "e": "Heap",
                "f": "Tree"
              },
              "answer": "b"
            },
            {
              "id": 38,
              "question": "What does the following code return?\n\n```python\nprint(5 // 2)\n```",
              "options": {
                "a": "2",
                "b": "2.5",
                "c": "3",
                "d": "Error",
                "e": "None",
                "f": "0"
              },
              "answer": "a"
            },
            {
              "id": 39,
              "question": "What will be the output of the following code?\n\n```python\nprint(2 ** 3 ** 2)\n```",
              "options": {
                "a": "512",
                "b": "64",
                "c": "8",
                "d": "Error",
                "e": "None",
                "f": "256"
              },
              "answer": "a"
            },
            {
              "id": 40,
              "question": "What will be the output of the following code?\n\n```python\nprint(10 % 3)\n```",
              "options": {
                "a": "1",
                "b": "3",
                "c": "0",
                "d": "Error",
                "e": "None",
                "f": "10"
              },
              "answer": "a"
            },
            {
              "id": 41,
              "question": "Which keyword is used to define a function in Python?",
              "options": {
                "a": "function",
                "b": "define",
                "c": "def",
                "d": "func",
                "e": "None",
                "f": "Error"
              },
              "answer": "c"
            },
            {
              "id": 42,
              "question": "What will be the output of the following code?\n\n```python\nprint(type([]) is list)\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "0",
                "f": "Undefined"
              },
              "answer": "a"
            },
            {
              "id": 43,
              "question": "Which of the following is used to define a block of code in Python?",
              "options": {
                "a": "Curly braces `{}`",
                "b": "Indentation",
                "c": "Parentheses `()`",
                "d": "Semicolon `;`",
                "e": "None",
                "f": "Error"
              },
              "answer": "b"
            },
            {
              "id": 44,
              "question": "What will be the output of the following code?\n\n```python\nprint(10 == 10.0)\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "Error",
                "d": "None",
                "e": "0",
                "f": "Undefined"
              },
              "answer": "a"
            },
            {
              "id": 45,
              "question": "What does the following code return?\n\n```python\nprint(isinstance(5, int))\n```",
              "options": {
                "a": "True",
                "b": "False",
                "c": "None",
                "d": "Error",
                "e": "0",
                "f": "Undefined"
              },
              "answer": "a"
            },
            {
              "id": 46,
              "question": "Which method is used to add an element to the end of a list in Python?",
              "options": {
                "a": "append()",
                "b": "add()",
                "c": "push()",
                "d": "insert()",
                "e": "extend()",
                "f": "None of the above"
              },
              "answer": "a"
            },
            {
              "id": 47,
              "question": "What will be the output of the following code?\n\n```python\nprint(len([]))\n```",
              "options": {
                "a": "0",
                "b": "1",
                "c": "None",
                "d": "Error",
                "e": "Undefined",
                "f": "10"
              },
              "answer": "a"
            },
            {
              "id": 48,
              "question": "Which of the following is NOT a valid Python variable name?",
              "options": {
                "a": "_myVar",
                "b": "2ndVar",
                "c": "var_2",
                "d": "myVar",
                "e": "None",
                "f": "Error"
              },
              "answer": "b"
            },
            {
              "id": 49,
              "question": "What will be the output of the following code?\n\n```python\nprint(bool(0))\n```",
              "options": {
                "a": "False",
                "b": "True",
                "c": "None",
                "d": "Error",
                "e": "0",
                "f": "Undefined"
              },
              "answer": "a"
            },
            {
              "id": 50,
              "question": "What is the output of the following code?\n\n```python\nprint('Python'.upper())\n```",
              "options": {
                "a": "'PYTHON'",
                "b": "'Python'",
                "c": "'python'",
                "d": "Error",
                "e": "None",
                "f": "Undefined"
              },
              "answer": "a"
            }
      ],
      "coding_2mark": [
          {
              "id": 1,
              "question": "Write a function to reverse a given string.",
              "description": "Given a string, write a function to return the reversed string.",
              "constraints": "- The input will be a non-empty string.",
              "test_cases": [
                  {
                      "input": "Hello World",
                      "output": "dlroW olleH"
                  }
              ],
              "marks": 2
          },
          {
              "id": 2,
              "question": "Write a function to calculate the sum of all elements in a given list.",
              "description": "Given a list of integers, return the sum of all elements.",
              "constraints": "- The list will contain at least one integer.",
              "test_cases": [
                  {
                      "input": [1, 2, 3, 4, 5],
                      "output": 15
                  }
              ],
              "marks": 2
          },
          {
              "id": 3,
              "question": "Write a function to find the maximum number in a given list.",
              "description": "Given a list of integers, return the maximum number in the list.",
              "constraints": "- The list will contain at least one integer.",
              "test_cases": [
                  {
                      "input": [10, 20, 30, 40, 50],
                      "output": 50
                  }
              ],
              "marks": 2
          },
          {
              "id": 4,
              "question": "Write a function to check if a given number is prime.",
              "description": "Given an integer, return True if it is a prime number, otherwise return False.",
              "constraints": "- The input will be a positive integer greater than 1.",
              "test_cases": [
                  {
                      "input": 7,
                      "output": true
                  }
              ],
              "marks": 2
          },
          {
              "id": 5,
              "question": "Write a function to print the FizzBuzz sequence up to a given number.",
              "description": "Print numbers from 1 to n, replacing multiples of 3 with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'.",
              "constraints": "- The input will be a positive integer greater than 0.",
              "test_cases": [
                  {
                      "input": 20,
                      "output": [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz", 16, 17, "Fizz", 19, "Buzz"]
                  }
              ],
              "marks": 5
          },
          
  {
      "id": 6,
      "question": "Write a function to check if a given string is a palindrome.",
      "description": "Given a string, return True if it is a palindrome, otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "radar",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 7,
      "question": "Write a function to find the index of a given element in a list.",
      "description": "Given a list of integers and a target integer, return the index of the target in the list.",
      "constraints": "- The list will contain at least one element.\n- The target will always exist in the list.",
      "test_cases": [
          {
              "input": [[1, 2, 3, 4, 5], 3],
              "output": 2
          }
      ],
      "marks": 2
  },
  {
      "id": 8,
      "question": "Write a function to count the occurrences of each character in a given string.",
      "description": "Given a string, return a dictionary containing the count of each character.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "Hello World",
              "output": {"H": 1, "e": 1, "l": 3, "o": 2, " ": 1, "W": 1, "r": 1, "d": 1}
          }
      ],
      "marks": 5
  },
  {
      "id": 9,
      "question": "Write a function to sort a given list in ascending order.",
      "description": "Given a list of integers, return the sorted list in ascending order.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [5, 2, 8, 1, 9],
              "output": [1, 2, 5, 8, 9]
          }
      ],
      "marks": 2
  },
  {
      "id": 10,
      "question": "Write a function to check if two given strings are anagrams.",
      "description": "Given two strings, return True if they are anagrams, otherwise return False.",
      "constraints": "- The input strings will contain only lowercase letters.",
      "test_cases": [
          {
              "input": ["listen", "silent"],
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 11,
      "question": "Write a function to find the missing number in a given list of consecutive numbers.",
      "description": "Given a list of consecutive numbers with one missing, return the missing number.",
      "constraints": "- The list will contain at least two elements.",
      "test_cases": [
          {
              "input": [1, 2, 3, 5, 6],
              "output": 4
          }
      ],
      "marks": 5
  },
  {
      "id": 12,
      "question": "Write a function to check if a given year is a leap year.",
      "description": "Given a year, return True if it is a leap year, otherwise return False.",
      "constraints": "- The input will be a positive integer representing a year.",
      "test_cases": [
          {
              "input": 2020,
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 13,
      "question": "Write a function to find the GCD of two given numbers.",
      "description": "Given two integers, return their greatest common divisor.",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [12, 18],
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 14,
      "question": "Write a function to convert a given temperature from Celsius to Fahrenheit.",
      "description": "Given a temperature in Celsius, return the equivalent temperature in Fahrenheit.",
      "constraints": "- The input will be an integer or a floating-point number.",
      "test_cases": [
          {
              "input": 30,
              "output": 86
          }
      ],
      "marks": 2
  },
  {
      "id": 15,
      "question": "Write a function to check if a given number is even or odd.",
      "description": "Given an integer, return 'Even' if it is even, otherwise return 'Odd'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": 10,
              "output": "Even"
          }
      ],
      "marks": 2
  },
  {
      "id": 16,
      "question": "Write a function to find the smallest number in a given list.",
      "description": "Given a list of integers, return the smallest number.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [10, 20, 30, 40, 50],
              "output": 10
          }
      ],
      "marks": 2
  },
  {
      "id": 17,
      "question": "Write a function to check if a given string is empty.",
      "description": "Given a string, return True if it is empty, otherwise return False.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 18,
      "question": "Write a function to find the length of a given string.",
      "description": "Given a string, return its length.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "Hello World",
              "output": 11
          }
      ],
      "marks": 2
  },
  {
      "id": 19,
      "question": "Write a function to check if a given number is positive or negative.",
      "description": "Given an integer, return 'Positive' if it is greater than zero, otherwise return 'Negative'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": -10,
              "output": "Negative"
          }
      ],
      "marks": 2
  },
  {
      "id": 20,
      "question": "Write a function to find the product of two given numbers.",
      "description": "Given two integers, return their product.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [2, 3],
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 21,
      "question": "Count Vowels in a String.",
      "description": "Given a string, return the number of vowels in the string.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": 3
          }
      ],
      "marks": 2
  },
  {
      "id": 22,
      "question": "Find First Duplicate in a List.",
      "description": "Given a list of integers, return the first duplicate. If no duplicates are found, return None.",
      "constraints": "- The list will contain at least one element.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5, 2],
              "output": 2
          }
      ],
      "marks": 5
  },
  {
      "id": 23,
      "question": "Validate Email Address.",
      "description": "Given a string, return True if it is a valid email address, otherwise return False.",
      "constraints": "- The input will be a string.",
      "test_cases": [
          {
              "input": "test@example.com",
              "output": true
          }
      ],
      "marks": 5
  },
         
  {
      "id": 24,
      "question": "Write a function to reverse a given string.",
      "description": "Given a string, return the reversed version of it.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello",
              "output": "olleh"
          }
      ],
      "marks": 2
  },
  {
      "id": 25,
      "question": "Write a function to calculate the sum of digits of a given number.",
      "description": "Given an integer, return the sum of its digits.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 123,
              "output": 6
          }
      ],
      "marks": 2
  },
  {
      "id": 26,
      "question": "Write a function to check if a number is a power of two.",
      "description": "Given an integer, return True if it is a power of two, otherwise return False.",
      "constraints": "- The input will be a positive integer.",
      "test_cases": [
          {
              "input": 8,
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 27,
      "question": "Write a function to check if a list is sorted in ascending order.",
      "description": "Given a list of integers, return True if it is sorted in ascending order, otherwise return False.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5],
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 28,
      "question": "Write a function to convert a given integer to binary format.",
      "description": "Given an integer, return its binary representation as a string.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 10,
              "output": "1010"
          }
      ],
      "marks": 2
  },
  {
      "id": 29,
      "question": "Write a function to find the second largest number in a list.",
      "description": "Given a list of integers, return the second largest number.",
      "constraints": "- The list will contain at least two distinct numbers.",
      "test_cases": [
          {
              "input": [10, 20, 30, 40, 50],
              "output": 40
          }
      ],
      "marks": 5
  },
  {
      "id": 30,
      "question": "Write a function to check if a string contains only digits.",
      "description": "Given a string, return True if it contains only digits, otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "123456",
              "output": true
          }
      ],
      "marks": 2
  },
  {
      "id": 31,
      "question": "Write a function to remove duplicate elements from a list.",
      "description": "Given a list of integers, return a new list with duplicates removed.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 2, 3, 4, 4, 5],
              "output": [1, 2, 3, 4, 5]
          }
      ],
      "marks": 2
  },
  {
      "id": 32,
      "question": "Write a function to convert a given string to title case.",
      "description": "Given a string, return it in title case (first letter of each word capitalized).",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "Hello World"
          }
      ],
      "marks": 2
  },
  {
      "id": 33,
      "question": "Write a function to merge two sorted lists into one sorted list.",
      "description": "Given two sorted lists, return a single sorted list containing all elements.",
      "constraints": "- Both lists will contain at least one integer.",
      "test_cases": [
          {
              "input": [[1, 3, 5], [2, 4, 6]],
              "output": [1, 2, 3, 4, 5, 6]
          }
      ],
      "marks": 5
  },
  {
      "id": 34,
      "question": "Write a function to find the mode of a list of numbers.",
      "description": "Given a list of numbers, return the mode (the number that appears most frequently).",
      "constraints": "- The list will contain at least one number.",
      "test_cases": [
          {
              "input": [1, 2, 2, 3, 3, 3, 4],
              "output": 3
          }
      ],
      "marks": 5
  },
  {
      "id": 35,
      "question": "Write a function to generate the Fibonacci sequence up to n terms.",
      "description": "Given an integer n, return a list containing the first n Fibonacci numbers.",
      "constraints": "- The input will be a positive integer.",
      "test_cases": [
          {
              "input": 5,
              "output": [0, 1, 1, 2, 3]
          }
      ],
      "marks": 5
  },
  {
      "id": 36,
      "question": "Write a function to remove all vowels from a string.",
      "description": "Given a string, return a new string with all vowels removed.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "hll wrld"
          }
      ],
      "marks": 2
  },
  {
      "id": 37,
      "question": "Write a function to check if a number is a prime number.",
      "description": "Given an integer, return True if it is prime, otherwise return False.",
      "constraints": "- The input will be a positive integer greater than 1.",
      "test_cases": [
          {
              "input": 13,
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 38,
      "question": "Write a function to count the number of words in a string.",
      "description": "Given a string, return the number of words in the string.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "Hello world, how are you?",
              "output": 5
          }
      ],
      "marks": 2
  },
  {
      "id": 39,
      "question": "Write a function to swap two numbers without using a third variable.",
      "description": "Given two integers, return them swapped without using a temporary variable.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [3, 5],
              "output": [5, 3]
          }
      ],
      "marks": 5
  },
  {
      "id": 40,
      "question": "Write a function to find the HCF (Highest Common Factor) of two numbers.",
      "description": "Given two numbers, return their highest common factor (HCF).",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [24, 36],
              "output": 12
          }
      ],
      "marks": 5
  },
  {
      "id": 41,
      "question": "Write a function to check if a number is an Armstrong number.",
      "description": "Given an integer, return True if it is an Armstrong number, otherwise return False.",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 153,
              "output": true
          }
      ],
      "marks": 5
  },
          {
              "id": 42,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          18
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          7,
                          16
                      ],
                      "output": 38
                  }
              ],
              "marks": 2
          },
          
  {
      "id": 42,
      "question": "Write a function to check if a given string is a palindrome.",
      "description": "Given a string, return True if it is a palindrome (reads the same forward and backward), otherwise return False.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "madam",
              "output": true
          }
      ],
      "marks": 5
  },
  {
      "id": 43,
      "question": "Write a function to check if a number is even or odd.",
      "description": "Given an integer, return 'Even' if the number is even, otherwise return 'Odd'.",
      "constraints": "- The input will be an integer.",
      "test_cases": [
          {
              "input": 7,
              "output": "Odd"
          }
      ],
      "marks": 2
  },
  {
      "id": 44,
      "question": "Write a function to compute the factorial of a number.",
      "description": "Given an integer n, return n! (n factorial).",
      "constraints": "- The input will be a non-negative integer.",
      "test_cases": [
          {
              "input": 5,
              "output": 120
          }
      ],
      "marks": 5
  },
  {
      "id": 45,
      "question": "Write a function to count the occurrences of a character in a string.",
      "description": "Given a string and a character, return the number of times the character appears in the string.",
      "constraints": "- The input string will be non-empty.",
      "test_cases": [
          {
              "input": ["hello", "l"],
              "output": 2
          }
      ],
      "marks": 2
  },
  {
      "id": 46,
      "question": "Write a function to find the greatest of three numbers.",
      "description": "Given three integers, return the largest among them.",
      "constraints": "- The inputs will be integers.",
      "test_cases": [
          {
              "input": [10, 20, 15],
              "output": 20
          }
      ],
      "marks": 2
  },
  {
      "id": 47,
      "question": "Write a function to find the GCD (Greatest Common Divisor) of two numbers.",
      "description": "Given two integers, return their greatest common divisor (GCD).",
      "constraints": "- The inputs will be positive integers.",
      "test_cases": [
          {
              "input": [18, 24],
              "output": 6
          }
      ],
      "marks": 5
  },
  {
      "id": 48,
      "question": "Write a function to reverse the words in a sentence.",
      "description": "Given a string sentence, return a new sentence with words in reverse order.",
      "constraints": "- The input will be a non-empty string.",
      "test_cases": [
          {
              "input": "hello world",
              "output": "world hello"
          }
      ],
      "marks": 5
  },
  {
      "id": 49,
      "question": "Write a function to find the sum of all elements in a list.",
      "description": "Given a list of integers, return the sum of all elements.",
      "constraints": "- The list will contain at least one integer.",
      "test_cases": [
          {
              "input": [1, 2, 3, 4, 5],
              "output": 15
          }
      ],
      "marks": 2
  },
  {
      "id": 50,
      "question": "Write a function to check if two strings are anagrams.",
      "description": "Given two strings, return True if they are anagrams of each other (contain the same characters in different order), otherwise return False.",
      "constraints": "- The input strings will be non-empty.",
      "test_cases": [
          {
              "input": ["listen", "silent"],
              "output": true
          }
      ],
      "marks": 5
  }


      ],
      "coding_5mark": [
          {
              "id": 1,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          13
                      ],
                      "output": 26
                  },
                  {
                      "input": [
                          8,
                          20
                      ],
                      "output": 49
                  }
              ],
              "marks": 5
          },
          {
              "id": 2,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          13
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          11,
                          18
                      ],
                      "output": 32
                  }
              ],
              "marks": 5
          },
          {
              "id": 3,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          11
                      ],
                      "output": 30
                  },
                  {
                      "input": [
                          11,
                          21
                      ],
                      "output": 34
                  }
              ],
              "marks": 5
          },
          {
              "id": 4,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          13
                      ],
                      "output": 23
                  },
                  {
                      "input": [
                          13,
                          21
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 5,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          18
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          11,
                          15
                      ],
                      "output": 32
                  }
              ],
              "marks": 5
          },
          {
              "id": 6,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          10
                      ],
                      "output": 29
                  },
                  {
                      "input": [
                          6,
                          21
                      ],
                      "output": 44
                  }
              ],
              "marks": 5
          },
          {
              "id": 7,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          13
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          15,
                          24
                      ],
                      "output": 31
                  }
              ],
              "marks": 5
          },
          {
              "id": 8,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          16
                      ],
                      "output": 23
                  },
                  {
                      "input": [
                          6,
                          19
                      ],
                      "output": 42
                  }
              ],
              "marks": 5
          },
          {
              "id": 9,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          13
                      ],
                      "output": 25
                  },
                  {
                      "input": [
                          12,
                          23
                      ],
                      "output": 32
                  }
              ],
              "marks": 5
          },
          {
              "id": 10,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          16
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          10,
                          15
                      ],
                      "output": 40
                  }
              ],
              "marks": 5
          },
          {
              "id": 11,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          18
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          14,
                          21
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 12,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          16
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          9,
                          20
                      ],
                      "output": 38
                  }
              ],
              "marks": 5
          },
          {
              "id": 13,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          20
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          14,
                          18
                      ],
                      "output": 36
                  }
              ],
              "marks": 5
          },
          {
              "id": 14,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          16
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          6,
                          18
                      ],
                      "output": 43
                  }
              ],
              "marks": 5
          },
          {
              "id": 15,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          6,
                          17
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          13,
                          24
                      ],
                      "output": 40
                  }
              ],
              "marks": 5
          },
          {
              "id": 16,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          20
                      ],
                      "output": 29
                  },
                  {
                      "input": [
                          9,
                          16
                      ],
                      "output": 45
                  }
              ],
              "marks": 5
          },
          {
              "id": 17,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          17
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          14,
                          17
                      ],
                      "output": 45
                  }
              ],
              "marks": 5
          },
          {
              "id": 18,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          11
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          15,
                          17
                      ],
                      "output": 41
                  }
              ],
              "marks": 5
          },
          {
              "id": 19,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          2,
                          20
                      ],
                      "output": 22
                  },
                  {
                      "input": [
                          13,
                          18
                      ],
                      "output": 39
                  }
              ],
              "marks": 5
          },
          {
              "id": 20,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          10
                      ],
                      "output": 23
                  },
                  {
                      "input": [
                          11,
                          22
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 21,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          6,
                          16
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          11,
                          15
                      ],
                      "output": 39
                  }
              ],
              "marks": 5
          },
          {
              "id": 22,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          6,
                          12
                      ],
                      "output": 29
                  },
                  {
                      "input": [
                          15,
                          24
                      ],
                      "output": 45
                  }
              ],
              "marks": 5
          },
          {
              "id": 23,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          11
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          8,
                          23
                      ],
                      "output": 37
                  }
              ],
              "marks": 5
          },
          {
              "id": 24,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          4,
                          20
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          14,
                          20
                      ],
                      "output": 42
                  }
              ],
              "marks": 5
          },
          {
              "id": 25,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          19
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          11,
                          21
                      ],
                      "output": 37
                  }
              ],
              "marks": 5
          },
          {
              "id": 26,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          2,
                          20
                      ],
                      "output": 29
                  },
                  {
                      "input": [
                          5,
                          24
                      ],
                      "output": 47
                  }
              ],
              "marks": 5
          },
          {
              "id": 27,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          17
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          10,
                          23
                      ],
                      "output": 33
                  }
              ],
              "marks": 5
          },
          {
              "id": 28,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          4,
                          15
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          7,
                          19
                      ],
                      "output": 47
                  }
              ],
              "marks": 5
          },
          {
              "id": 29,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          10,
                          17
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          6,
                          15
                      ],
                      "output": 36
                  }
              ],
              "marks": 5
          },
          {
              "id": 30,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          14
                      ],
                      "output": 30
                  },
                  {
                      "input": [
                          6,
                          19
                      ],
                      "output": 47
                  }
              ],
              "marks": 5
          },
          {
              "id": 31,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          2,
                          18
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          5,
                          20
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 32,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          10,
                          13
                      ],
                      "output": 23
                  },
                  {
                      "input": [
                          9,
                          17
                      ],
                      "output": 50
                  }
              ],
              "marks": 5
          },
          {
              "id": 33,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          18
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          10,
                          24
                      ],
                      "output": 38
                  }
              ],
              "marks": 5
          },
          {
              "id": 34,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          4,
                          20
                      ],
                      "output": 25
                  },
                  {
                      "input": [
                          12,
                          23
                      ],
                      "output": 37
                  }
              ],
              "marks": 5
          },
          {
              "id": 35,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          16
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          10,
                          18
                      ],
                      "output": 36
                  }
              ],
              "marks": 5
          },
          {
              "id": 36,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          8,
                          16
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          10,
                          25
                      ],
                      "output": 35
                  }
              ],
              "marks": 5
          },
          {
              "id": 37,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          8,
                          16
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          13,
                          24
                      ],
                      "output": 41
                  }
              ],
              "marks": 5
          },
          {
              "id": 38,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          11
                      ],
                      "output": 20
                  },
                  {
                      "input": [
                          9,
                          23
                      ],
                      "output": 46
                  }
              ],
              "marks": 5
          },
          {
              "id": 39,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          12
                      ],
                      "output": 21
                  },
                  {
                      "input": [
                          11,
                          18
                      ],
                      "output": 33
                  }
              ],
              "marks": 5
          },
          {
              "id": 40,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          4,
                          17
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          8,
                          17
                      ],
                      "output": 35
                  }
              ],
              "marks": 5
          },
          {
              "id": 41,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          3,
                          15
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          6,
                          23
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 42,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          20
                      ],
                      "output": 30
                  },
                  {
                      "input": [
                          15,
                          16
                      ],
                      "output": 48
                  }
              ],
              "marks": 5
          },
          {
              "id": 43,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          10,
                          14
                      ],
                      "output": 25
                  },
                  {
                      "input": [
                          5,
                          23
                      ],
                      "output": 50
                  }
              ],
              "marks": 5
          },
          {
              "id": 44,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          19
                      ],
                      "output": 22
                  },
                  {
                      "input": [
                          5,
                          15
                      ],
                      "output": 43
                  }
              ],
              "marks": 5
          },
          {
              "id": 45,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          6,
                          16
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          7,
                          20
                      ],
                      "output": 33
                  }
              ],
              "marks": 5
          },
          {
              "id": 46,
              "question": "Implement a function for Dynamic Programming problem.",
              "description": "Write a Python function to solve a problem related to Dynamic Programming. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          19
                      ],
                      "output": 25
                  },
                  {
                      "input": [
                          13,
                          20
                      ],
                      "output": 37
                  }
              ],
              "marks": 5
          },
          {
              "id": 47,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          1,
                          19
                      ],
                      "output": 29
                  },
                  {
                      "input": [
                          5,
                          22
                      ],
                      "output": 43
                  }
              ],
              "marks": 5
          },
          {
              "id": 48,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          5,
                          18
                      ],
                      "output": 24
                  },
                  {
                      "input": [
                          6,
                          22
                      ],
                      "output": 34
                  }
              ],
              "marks": 5
          },
          {
              "id": 49,
              "question": "Implement a function for Multithreading problem.",
              "description": "Write a Python function to solve a problem related to Multithreading. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          9,
                          20
                      ],
                      "output": 28
                  },
                  {
                      "input": [
                          12,
                          18
                      ],
                      "output": 49
                  }
              ],
              "marks": 5
          },
          {
              "id": 50,
              "question": "Implement a function for Graph Algorithms problem.",
              "description": "Write a Python function to solve a problem related to Graph Algorithms. The function should be efficient and correctly handle edge cases.",
              "constraints": "- The function should be implemented without using built-in functions that directly solve the problem.\n- The time complexity should be optimal for hard level problems.\n- Handle invalid inputs gracefully and return appropriate error messages.",
              "test_cases": [
                  {
                      "input": [
                          7,
                          14
                      ],
                      "output": 27
                  },
                  {
                      "input": [
                          9,
                          24
                      ],
                      "output": 34
                  }
              ],
              "marks": 5
          }
      ]
  }
}